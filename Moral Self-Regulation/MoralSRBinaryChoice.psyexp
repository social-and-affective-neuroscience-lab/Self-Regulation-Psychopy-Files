<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="MoralSRBinaryChoice" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="PracticeDilemmas_2">
      <TextComponent name="practiceQs">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="practiceQs" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$PracticeDilemmas" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="space1">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="space1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="PracticeAnswers">
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="set every repeat" val="'y','n'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="conBlank">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="conBlank" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="len(key_resp.keys) &gt; 0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="leftText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="leftText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.41, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$PracticeLeftText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="rightText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="rightText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.46, 0.05)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$PracticeRightText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Yes">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Yes" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="Implement the plan ('y')" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="2.5" valType="code"/>
      </TextComponent>
      <TextComponent name="No">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="No" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.0, -0.33)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="Do nothing ('n')" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_5">
        <Param name="Begin Experiment" updates="constant" val="import numpy&amp;#10;from numpy import random&amp;#10;&amp;#10;earnings = 0&amp;#10;earningsStr = &quot;$&quot; + str(earnings)&amp;#10;subID = int(expInfo['participant'])&amp;#10;&amp;#10;FiftyGamble = [1,0]&amp;#10;SixtyGamble = [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]&amp;#10;ThirtyGamble = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;earning=0&amp;#10;choseCode = []&amp;#10;chanceResult = []&amp;#10;&amp;#10;#probability =[]&amp;#10;def gamProbability(GroupProb):&amp;#10;    probs = int(GroupProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;def gambleFunc(GroupProb):&amp;#10;    probs = int(GroupProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;    result = random.choice(probability)&amp;#10;    print('Chance result:')&amp;#10;    print(result)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="var earnings;&amp;#10;&amp;#10;earnings = 0 &amp;#10;&amp;#10;var earningsStr;&amp;#10;&amp;#10;earningsStr = &quot;$&quot; + str(earnings)&amp;#10;&amp;#10;var subID;&amp;#10;&amp;#10;subID = parseInt(expInfo['participant'])&amp;#10;&amp;#10;var FiftyGamble;&amp;#10;var SixtyGamble;&amp;#10;var ThirtyGamble; &amp;#10;&amp;#10;FiftyGamble = [1,0]&amp;#10;SixtyGamble = [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]&amp;#10;ThirtyGamble = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;var earning;&amp;#10;earning = 0&amp;#10;&amp;#10;var choseCode;&amp;#10;choseCode = []&amp;#10;&amp;#10;var chanceResult;&amp;#10;chanceResult = []&amp;#10;&amp;#10;#probability =[]&amp;#10;def gamProbability(GroupProb){&amp;#10;    probs = int(GroupProb)&amp;#10;    if (probs == 65){&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;        }&amp;#10;    if (probs == 35){&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;        }&amp;#10;    if (probs == 50){&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;        }&amp;#10; }&amp;#10;def gambleFunc(GroupProb){&amp;#10;    probs = int(GroupProb)&amp;#10;    if (probs == 65){&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;        }&amp;#10;    if (probs == 35){&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;        }&amp;#10;    if (probs == 50){&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;        }&amp;#10;    result = random.choice(probability)&amp;#10;    print('Chance result:')&amp;#10;    print(result)&amp;#10;    }" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if key_resp.keys == 'y':&amp;#10;    Yes.setColor('red')&amp;#10;if key_resp.keys == 'n':&amp;#10;    No.setColor('red')&amp;#10;    &amp;#10;#if (key_resp.keys == 'y' or key_resp.keys == 'n') and conBlank.status == NOT_STARTED:&amp;#10;#    conBlank.tStart = t&amp;#10;#    conBlank.frameNStart = frameN&amp;#10;#    conBlank.setAutoDraw(True)&amp;#10;&amp;#10;if key_resp.keys == 'y' or key_resp.keys == 'n':&amp;#10;    key_resp.status = FINISHED" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="&amp;#10;if (key_resp.keys == 'y'){&amp;#10;    Yes.setColor('red');&amp;#10;    }&amp;#10;if (key_resp.keys == 'n'){&amp;#10;    No.setColor('red');&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;if (key_resp.keys == 'y' || key_resp.keys == 'n'){&amp;#10;    key_resp.status = FINISHED;&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (key_resp.keys == 'y'){&amp;#10;    choseCode = 1;&amp;#10;    }&amp;#10;if (key_resp.keys == 'n'){&amp;#10;    choseCode = 0;&amp;#10;    }&amp;#10;&amp;#10;if (choseCode == 0 ){  &amp;#10;    print('Chose to do nothing, play out the probability ');&amp;#10;    probs = int(GroupProb);&amp;#10;    if (probs == 65){&amp;#10;        probability = SixtyGamble;&amp;#10;        print('65% gamble');&amp;#10;        }&amp;#10;    if (probs == 35){&amp;#10;        probability = ThirtyGamble;&amp;#10;        print('35% gamble');&amp;#10;        }&amp;#10;    if (probs == 50){&amp;#10;        probability = FiftyGamble;&amp;#10;        print('50% gamble');&amp;#10;        }&amp;#10;    result = random.choice(probability);&amp;#10;    print('Chance result:');&amp;#10;    print(result);&amp;#10;    if (result == 1){&amp;#10;        print('The group escaped!');&amp;#10;        print(earnings);&amp;#10;        chanceResult = (&quot; was saved.&quot;);&amp;#10;        }&amp;#10;    if (result == 0){&amp;#10;        print('The group died! :(');&amp;#10;        chanceResult = (' died.');&amp;#10;        }&amp;#10;  }&amp;#10;&amp;#10;&amp;#10;&amp;#10;Yes.setColor('white')&amp;#10;No.setColor('white')&amp;#10;&amp;#10;if (conBlank.status == FINISHED){&amp;#10;    leftText.setAutoDraw(False);&amp;#10;    rightText.setAutoDraw(False);&amp;#10;    Yes.setAutoDraw(False);&amp;#10;    No.setAutoDraw(False);&amp;#10;    RemText.setAutoDraw(False);&amp;#10;    Question.setAutoDraw(False);&amp;#10;    continueRoutine = False ;&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if key_resp.keys == 'y':&amp;#10;    choseCode = 1&amp;#10;if key_resp.keys == 'n':&amp;#10;    choseCode = 0&amp;#10;&amp;#10;if choseCode == 0 :  &amp;#10;    print('Chose to do nothing, play out the probability ')&amp;#10;    probs = int(GroupProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% gamble')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% gamble')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% gamble')&amp;#10;    result = random.choice(probability)&amp;#10;    print('Chance result:')&amp;#10;    print(result)&amp;#10;    if result == 1:   #win&amp;#10;        print('The group escaped!')&amp;#10;        print(earnings)&amp;#10;        chanceResult = (&quot; were saved.&quot;)&amp;#10;    if result == 0: #lose&amp;#10;        print('The group died! :(')&amp;#10;        chanceResult = (' died.')&amp;#10;&amp;#10;&amp;#10;&amp;#10;Yes.setColor('white')&amp;#10;No.setColor('white')&amp;#10;&amp;#10;if conBlank.status == FINISHED:&amp;#10;    leftText.setAutoDraw(False)&amp;#10;    rightText.setAutoDraw(False)&amp;#10;    Yes.setAutoDraw(False)&amp;#10;    No.setAutoDraw(False)&amp;#10;    sureGroup.setAutoDraw(False)&amp;#10;#    RemText.setAutoDraw(False)&amp;#10;#    Question.setAutoDraw(False)&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
      <TextComponent name="sureGroup">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="sureGroup" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.43, 0.20)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sureGroupText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="code">
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="code1">
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" updates="constant" val="this_loop_number = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="this_loop_number +=1&amp;#10;&amp;#10;loopNum = int(this_loop_number)&amp;#10;&amp;#10;selectRows=((loopNum-1)*4+1):(loopNum*4)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="code2">
      <CodeComponent name="code_4">
        <Param name="Begin Experiment" updates="constant" val="this_loop_number = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="this_loop_number +=1&amp;#10;&amp;#10;selectRows = ((this_loop_number-1)*4+1):(this_loop_number*4)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="MainDilemmas">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$PracticeDilemmas" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="MainAnswers">
      <TextComponent name="leftText1">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="leftText1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$MainLeftText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="rightText1">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="rightText1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.5, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$MainRightText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <RatingScaleComponent name="rating_2">
        <Param name="categoryChoices" updates="constant" val="" valType="str"/>
        <Param name="customize_everything" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="disappear" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="high" updates="constant" val="7" valType="code"/>
        <Param name="labels" updates="constant" val="Completely Unacceptable, Completely Acceptable" valType="str"/>
        <Param name="low" updates="constant" val="1" valType="code"/>
        <Param name="marker" updates="constant" val="triangle" valType="str"/>
        <Param name="markerStart" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="rating_2" valType="code"/>
        <Param name="pos" updates="constant" val="0, -0.4" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="scaleDescription" updates="constant" val="" valType="str"/>
        <Param name="showAccept" updates="constant" val="False" valType="bool"/>
        <Param name="singleClick" updates="constant" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="1.3" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="storeHistory" updates="constant" val="False" valType="bool"/>
        <Param name="storeRating" updates="constant" val="True" valType="bool"/>
        <Param name="storeRatingTime" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="tickHeight" updates="constant" val="" valType="str"/>
        <Param name="visualAnalogScale" updates="constant" val="False" valType="bool"/>
      </RatingScaleComponent>
    </Routine>
    <Routine name="ThankYou">
      <TextComponent name="TY">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="TY" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Thank you for your participation!&amp;#10;&amp;#10;You have completed this part of the study." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Instructions">
      <TextComponent name="InstText">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="InstText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$Instructions" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="space">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="space" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SetUpCode">
      <CodeComponent name="code_6">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;'''&amp;#10;from itertools import chain&amp;#10;from itertools import zip_longest as zip&amp;#10;from random import shuffle &amp;#10;PracticeQ1 = data.importConditions('Users\Jojo\Downloads\HelionLab\ExperimentFiles\MoralSelf-Regulation\MoralSelfReg.csv', selection=u'0:04') &amp;#10;PracticeQ2 = data.importConditions('Users\Jojo\Downloads\HelionLab\ExperimentFiles\MoralSelf-Regulation\MoralSelfReg.csv', selection=u'04:08')&amp;#10;&amp;#10;&amp;#10;shuffle(PracticeQ1) &amp;#10;shuffle(PracticeQ2)&amp;#10;&amp;#10;trialList=list(chain.from_iterable(zip(PracticeQ1, PracticeQ2)))&amp;#10;'''" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Cue">
      <TextComponent name="cue">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="cue" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$CueInstructions1" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_7">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="subID = int(expInfo['participant'])&amp;#10;&amp;#10;if subID%2==0:&amp;#10;    cue.setText(CueInstructions1)&amp;#10;if subID%2==1:&amp;#10;    cue.setText(CueInstructions2)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="isi2">
      <TextComponent name="isi_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="isi_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="ISI">
      <TextComponent name="isi">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="isi" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Feedback">
      <TextComponent name="FeedbackVar">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.07" valType="code"/>
        <Param name="name" updates="None" val="FeedbackVar" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="default" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_8">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var groupNum;&amp;#10;var numPeople;&amp;#10;var groupResult;&amp;#10;var nounStr;&amp;#10;var resultGroup;&amp;#10;&amp;#10;groupNum = parseInt(GroupNumber);&amp;#10;numPeople = str(groupNum);&amp;#10;groupResult = str(chanceResult);&amp;#10;nounStr = str(Noun);&amp;#10;resultGroup = (&quot;of &quot; + numPeople + nounStr + groupResult);&amp;#10;&amp;#10;if (choseCode == 1){&amp;#10;    FeedbackVar.setText(ChosePlan);&amp;#10;    }&amp;#10;    &amp;#10;if (choseCode == 0){&amp;#10;    FeedbackVar.setText(ChoseNothing + resultGroup);&amp;#10;    }" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="groupNum = int(GroupNumber)&amp;#10;numPeople = str(groupNum)&amp;#10;groupResult = str(chanceResult)&amp;#10;nounStr = str(Noun)&amp;#10;resultGroup = (numPeople + nounStr + groupResult)&amp;#10;&amp;#10;if choseCode == 1:&amp;#10;    FeedbackVar.setText(ChosePlan)&amp;#10;    &amp;#10;if choseCode == 0:&amp;#10;    FeedbackVar.setText(ChoseNothing + resultGroup)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="MainAnswers_2">
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'y','n'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="conBlank2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="conBlank2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="len(key_resp_3.keys) &gt; 0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="RemText2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="RemText2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.32)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank2.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
      <TextComponent name="leftText2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="leftText2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.41, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank2.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$PracticeLeftText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="rightText2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="rightText2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.46, 0.05)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank2.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$PracticeRightText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="yes2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="yes2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank2.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="Implement the plan ('y')" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="no2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="no2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.0, -0.33)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank2.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="Do nothing ('n')" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_9">
        <Param name="Begin Experiment" updates="constant" val="import numpy&amp;#10;from numpy import random&amp;#10;&amp;#10;earnings = 0&amp;#10;earningsStr = &quot;$&quot; + str(earnings)&amp;#10;subID = int(expInfo['participant'])&amp;#10;&amp;#10;FiftyGamble = [1,0]&amp;#10;SixtyGamble = [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]&amp;#10;ThirtyGamble = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;earning=0&amp;#10;choseCode = []&amp;#10;chanceResult = []&amp;#10;&amp;#10;#probability =[]&amp;#10;def gamProbability(GroupProb):&amp;#10;    probs = int(GroupProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;def gambleFunc(GroupProb):&amp;#10;    probs = int(GroupProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;    result = random.choice(probability)&amp;#10;    print('Chance result:')&amp;#10;    print(result)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="var earnings;&amp;#10;&amp;#10;earnings = 0 &amp;#10;&amp;#10;var earningsStr;&amp;#10;&amp;#10;earningsStr = &quot;$&quot; + str(earnings)&amp;#10;&amp;#10;var subID;&amp;#10;&amp;#10;subID = parseInt(expInfo['participant'])&amp;#10;&amp;#10;var FiftyGamble;&amp;#10;var SixtyGamble;&amp;#10;var ThirtyGamble; &amp;#10;&amp;#10;FiftyGamble = [1,0]&amp;#10;SixtyGamble = [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]&amp;#10;ThirtyGamble = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;var earning;&amp;#10;earning = 0&amp;#10;&amp;#10;var choseCode;&amp;#10;choseCode = []&amp;#10;&amp;#10;var chanceResult;&amp;#10;chanceResult = []&amp;#10;&amp;#10;#probability =[]&amp;#10;def gamProbability(GroupProb){&amp;#10;    probs = int(GroupProb)&amp;#10;    if (probs == 65){&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;        }&amp;#10;    if (probs == 35){&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;        }&amp;#10;    if (probs == 50){&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;        }&amp;#10; }&amp;#10;def gambleFunc(GroupProb){&amp;#10;    probs = int(GroupProb)&amp;#10;    if (probs == 65){&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% chance')&amp;#10;        }&amp;#10;    if (probs == 35){&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% chance')&amp;#10;        }&amp;#10;    if (probs == 50){&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% chance')&amp;#10;        }&amp;#10;    result = random.choice(probability)&amp;#10;    print('Chance result:')&amp;#10;    print(result)&amp;#10;    }" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if key_resp_3.keys == 'y':&amp;#10;    yes2.setColor('red')&amp;#10;if key_resp_3.keys == 'n':&amp;#10;    no2.setColor('red')&amp;#10;    &amp;#10;#if (key_resp.keys == 'y' or key_resp.keys == 'n') and conBlank.status == NOT_STARTED:&amp;#10;#    conBlank.tStart = t&amp;#10;#    conBlank.frameNStart = frameN&amp;#10;#    conBlank.setAutoDraw(True)&amp;#10;&amp;#10;if key_resp_3.keys == 'y' or key_resp_3.keys == 'n':&amp;#10;    key_resp_3.status = FINISHED" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="&amp;#10;if (key_resp_3.keys == 'y'){&amp;#10;    yes2.setColor('red');&amp;#10;    }&amp;#10;if (key_resp_3.keys == 'n'){&amp;#10;    no2.setColor('red');&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;if (key_resp_3.keys == 'y' || key_resp.keys == 'n'){&amp;#10;    key_resp_3.status = FINISHED;&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (key_resp_3.keys == 'y'){&amp;#10;    choseCode = 1;&amp;#10;    }&amp;#10;if (key_resp_3.keys == 'n'){&amp;#10;    choseCode = 0;&amp;#10;    }&amp;#10;&amp;#10;if (choseCode == 0 ){  &amp;#10;    print('Chose to do nothing, play out the probability ');&amp;#10;    probs = int(GroupProb);&amp;#10;    if (probs == 65){&amp;#10;        probability = SixtyGamble;&amp;#10;        print('65% gamble');&amp;#10;        }&amp;#10;    if (probs == 35){&amp;#10;        probability = ThirtyGamble;&amp;#10;        print('35% gamble');&amp;#10;        }&amp;#10;    if (probs == 50){&amp;#10;        probability = FiftyGamble;&amp;#10;        print('50% gamble');&amp;#10;        }&amp;#10;    result = random.choice(probability);&amp;#10;    print('Chance result:');&amp;#10;    print(result);&amp;#10;    if (result == 1){&amp;#10;        print('The group escaped!');&amp;#10;        print(earnings);&amp;#10;        chanceResult = (&quot; was saved.&quot;);&amp;#10;        }&amp;#10;    if (result == 0){&amp;#10;        print('The group died! :(');&amp;#10;        chanceResult = (' died.');&amp;#10;        }&amp;#10;  }&amp;#10;&amp;#10;&amp;#10;&amp;#10;yes2.setColor('white')&amp;#10;no2.setColor('white')&amp;#10;&amp;#10;if (conBlank2.status == FINISHED){&amp;#10;    leftText2.setAutoDraw(False);&amp;#10;    rightText2.setAutoDraw(False);&amp;#10;    yes2.setAutoDraw(False);&amp;#10;    no2.setAutoDraw(False);&amp;#10;    RemText2.setAutoDraw(False);&amp;#10;    Question2.setAutoDraw(False);&amp;#10;    continueRoutine = False ;&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if key_resp_3.keys == 'y':&amp;#10;    choseCode = 1&amp;#10;if key_resp_3.keys == 'n':&amp;#10;    choseCode = 0&amp;#10;&amp;#10;if choseCode == 0 :  &amp;#10;    print('Chose to do nothing, play out the probability ')&amp;#10;    probs = int(GroupProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% gamble')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% gamble')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% gamble')&amp;#10;    result = random.choice(probability)&amp;#10;    print('Chance result:')&amp;#10;    print(result)&amp;#10;    if result == 1:   #win&amp;#10;        print('The group escaped!')&amp;#10;        print(earnings)&amp;#10;        chanceResult = (&quot; were saved.&quot;)&amp;#10;    if result == 0: #lose&amp;#10;        print('The group died! :(')&amp;#10;        chanceResult = (' died.')&amp;#10;&amp;#10;&amp;#10;&amp;#10;yes2.setColor('white')&amp;#10;no2.setColor('white')&amp;#10;&amp;#10;if conBlank2.status == FINISHED:&amp;#10;    leftText2.setAutoDraw(False)&amp;#10;    rightText2.setAutoDraw(False)&amp;#10;    yes2.setAutoDraw(False)&amp;#10;    no2.setAutoDraw(False)&amp;#10;    text_2.setAutoDraw(False)&amp;#10;   # RemText2.setAutoDraw(False)&amp;#10;    #Question2.setAutoDraw(False)&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_9" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.43, 0.20)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="conBlank2.status == FINISHED" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sureGroupText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="BeginInstr">
      <TextComponent name="instructions2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="code"/>
        <Param name="name" updates="None" val="instructions2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now begin the main part of the task.&amp;#10;&amp;#10;Press SPACE to start!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="IntroLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('Instructions', 'In this study you will be asked to evaluate a number of moral dilemmas under various conditions. \n\nYou will be presented with 10 different scenario contexts and will respond to 5 conditions for each one.\n\nFor each scenario, you will proceed through five screens. These screens will describe a situation that you are hypothetically faced with and an action that you could perform in response to that situation. \n\nWhen you are done reading each screen, you can press SPACE to move on to the next one.\n\nHowever, please try your best to get the fullest understanding of the scenario as described thus far before moving on to the next screen.')]), OrderedDict([('Instructions', 'The scenario description will include all the information you need to make your decision EXCEPT that it will not explicitly state the values for two features of the dilemma:\n\na) a number of people involved in part of the scenario, and \n\nb) a likelihood that something will happen\n\nYou will be evaluating this scenario given a number of variations of these features.\n\nThe fourth and final screen will provide you with the prompt that you will be answering for each of these variations - namely, whether or not it is morally acceptable for you to perform the action in question.')]), OrderedDict([('Instructions', 'After you have understood the scenario context and the question you will be answering, you can press SPACE to move on to the individual trials that will fill these gaps for you in the scenario.\n\nBefore you do so, please try your best to hold in mind what the action is that you will be evaluating across trials, as you will not be reminded of this after this screen.\n\nFirst, you will see a &quot;+&quot; in the middle of the screen. Any time that this is up, all you need to do is fixate on the &quot;+&quot; and prepare to respond to the next trial. \n\nNext, you will see text appear indicating the missing information. You should then evaluate the action in question in the context of these values given, and make a judgment of its moral acceptibility.\n\nYou will then indicate the course of action you would like to take in each scenario; by pressing either \'y\' on your keyboard to indicate \'Yes\', or \'n\' to indicate \'No.\'\n')]), OrderedDict([('Instructions', 'After you answer you will again see a &quot;+&quot; in the middle of the screen, followed by the next trial. This will occur for 5 different variations of each scenario. \n\nIt is important that you try your best to judge each trial in isolation, and avoid consideration of past responses for the current scenario or past scenarios.\n\nOnce you have pressed a button there is no way to go back to the previous screen. If you press the wrong button or if you press a button too soon, don\'t worry.')]), OrderedDict([('Instructions', 'Moral judgments can be difficult to make, and we understand that people sometimes change their minds about moral questions or feel conflicted about the answers they\'ve given. Don\'t think of your answers as &quot;written in stone.&quot; All we want from you is a thoughtful first response.\n\nWhile we want your answers to be thoughtful, you may find that in some cases the right answer seems immediately obvious. If that happens, it\'s okay to answer quickly. There are no trick questions, and in every case we have done our best to make the relevant information as clear as possible. \n\nNote, however, that no two scenarios are the same, although many are similar to each other. To answer a question properly you will have to read it carefully because it will always be different in some way from the questions you have already answered. ')]), OrderedDict([('Instructions', &quot;In some cases, you might feel that the situation we've described is not realistic. For example, it might say that if you do X, then Y will happen, and you might think that this is not realistic, that Y might not necessarily happen if you do X. If you find yourself having these sorts of doubts, you should suspend disbelief and assume that the situation really is the way it's described, even if it doesn't seem realistic to you.\n\nLikewise, you may feel that you need more information than is provided about the situation before you can give your answer. If this happens, you should make your best guess about what you think the situation is like without making any unneccessary assumptions. \n\nFor example, if it doesn't say that the other person in the situation is related to you, then you should assume that you and the other person are unrelated. &quot;)]), OrderedDict([('Instructions', 'Finally, after reading the scenario you will be making decisions about, you will be given a regulation strategy. Please employ this regulation strategy when making your decisions. \n\nYou will be instructed to either &quot;DE-EMPHASIZE&quot; or &quot;EMPHASIZE.&quot; When you see the word &quot;DE-EMPHASIZE,&quot; we would like you to reinterpret the upcoming decision as one of many opportunities, and that the outcome is not very important. Try to think that the decision is not a big deal; you will have other chances.\n\nWhen you see the word &quot;EMPHASIZE&quot; we would like you to stress the importance of the upcoming decision. Please reinterpret the upcoming decision as very important and one in which you need to make the right choice. Try to think that it matters a lot what you choose. ')]), OrderedDict([('Instructions', &quot;When you are done reading this screen you will begin a practice scenario. \n\nOnce again, you can press SPACE to advance through the first five screens. Then you will encounter a number of trials which you will decide if you want to implement an action or not, by pressing the 'y' or 'n' key.\n\nPress SPACE to begin the practice trials!\n&quot;)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="MoralSelfRegInst.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="IntroLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Instructions"/>
    <LoopTerminator name="IntroLoop"/>
    <LoopInitiator loopType="TrialHandler" name="PracticeLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('rows', '000:005'), ('CueInstructions1', 'EMPHASIZE'), ('CueInstructions2', 'DE-EMPHASIZE')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="moralRows.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PracticeLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <LoopInitiator loopType="TrialHandler" name="PracticeQs">
      <Param name="Selected rows" updates="None" val="0:5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('PracticeDilemmas', &quot;• You are the head of a safety crew that has been alerted about a group of skydivers that is wearing defective parachutes and is currently in a freefall \n\n• You've arrived in time to see that a group of divers is holding onto one another and will fall to their death a few feet to your right unless your crew's trampoline is moved beneath them&quot;), ('PracticeLeftText', 'Skydivers on right: 6'), ('PracticeRightText', 'Probability of \nparachute opening: 35% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 6 skydivers on the right were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', &quot;• Your crew sees a smaller group of divers apart from the rest who are much closer to reaching the ground, and instinctively moves a few feet to the left to catch them\n\n• You know that there won't be enough time to reach the group on the right if you wait to catch the group on the left&quot;), ('PracticeLeftText', 'Skydivers on right: 9'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 4 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 4 skydivers on the left died.\n\nThe 9 skydivers on the right were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 4')]), OrderedDict([('PracticeDilemmas', &quot;• If nothing is done, the safety crew will catch the divers to the left, avoiding their death, but the separate group of divers will land on the ground, causing their deaths\n\n• You can re-direct your crew to the right, preventing the death of the group, but the divers on the left won't be caught&quot;), ('PracticeLeftText', 'Skydivers on right: 5'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 2 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 2 skydivers on the left died.\n\nThe 5 skydivers on the right were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that one of the parachutes of the group will still open in time to prevent all of their deaths\n\n• There is no chance that the parachute will open for the one diver, given how close he is to the ground'), ('PracticeLeftText', 'Skydivers on right: 4'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 4 skydivers on the right were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan:  Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nOR\n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('PracticeLeftText', 'Skydivers on right: 8'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 5 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 5 skydivers on the left died.\n\nThe 8 skydivers on the right were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 5')]), OrderedDict([('PracticeDilemmas', &quot;• There has been an accident in the basement of an office building\n\n• A pipe has broken and is releasing a lethal gas into the building's ventilation system&quot;), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 35%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 3 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 3 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 3')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the gas will travel upward to Room A and cause the death of all workers there\n\n• You are the building manager'), ('PracticeLeftText', 'Workers in Room A: 10'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 10 workers in Room A were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You know that the only way to avoid the deaths of the workers in Room A is to block the main vent immediately by hitting a button that will close one of the vent doors\n\n• You also know that if you close the vent door the gas will be diverted into a different room, Room B, and cause the death of the workers there'), ('PracticeLeftText', 'Workers in Room A: 6'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 6 workers in Room A were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are also aware that there is a chance that the workers in Room A will escape before the gas reaches them\n\n• This would be impossible for the workers in Room B'), ('PracticeLeftText', 'Workers in Room A: 12'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 6 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 6 workers in Room B died. \n\nThe 12 workers in Room A were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the button to divert the gas to Room B, killing the workers there\n\nOR\n\nDo nothing: The workers in Room B will live, the group on Room A has a chance of escaping.'), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are operating a crane in front of a tall bridge when an earthquake hits\n\n• As a result of the earthquake, a gap has formed in the bridge, and a bus carrying a number of people is now partially hanging off of this gap in the bridge\n'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the bus will soon plummet and all of these people will be killed\n\n• You know that you can move your crane in a way to push the bus back onto the bridge, avoiding  the deaths of all the people on board'), ('PracticeLeftText', 'People on bus: 9'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 6 people in the car lived.\n\nThe '), ('ChosePlan', 'The 6 people in the car died. \n\nThe 9 people on the bus were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 6')]), OrderedDict([('PracticeDilemmas', '• However, you are also aware that in its current position your crane is supporting one small part of the bridge on which there is currently a single car\n\n• If you move the crane, this part will certainly collapse and the people in that car will be killed'), ('PracticeLeftText', 'People on bus: 6'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 50%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 6 people on the bus were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance the bus will be able to drive back onto the bridge, preventing the deaths of everyone on board\n \n• There is no chance that the car will be able to avoid falling if you move your crane '), ('PracticeLeftText', 'People on bus: 10'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 65%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 7 people in the car lived.\n\nThe '), ('ChosePlan', 'The 7 people in the car died. \n\nThe 10 people on the bus were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 7')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Move your crane to push the bus, certainly killing the people in the car\n\nOR\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 4 people in the car lived.\n\nThe '), ('ChosePlan', 'The 4 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 4')]), OrderedDict([('PracticeDilemmas', '• You are driving a rescue boat in the ocean, heading east towards a group of drowning people\n\n• You receive a distress signal informing you that a small boat has capsized in the opposite direction'), ('PracticeLeftText', 'People drowning in the west: 11'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 5 people in the east lived.\n\nThe '), ('ChosePlan', 'The 5 people in the east died.\n\nThe 11 people in the west were saved.'), ('GroupNumber', 11), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 5')]), OrderedDict([('PracticeDilemmas', '• All of the people aboard the capsized boat are now drowning\n\n• You know that if you immediately change course and go full speed, bearing west, you will reach these people in time to save them'), ('PracticeLeftText', 'People drowning in the west: 10'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 35%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 10 people in the west were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• However, if you do this, the people drowning in the east will certainly die\n\n• If you do nothing and hold your course, the people in the east will be saved, but you will not reach the people to the west in time to save them'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 3 people in the east lived.\n\nThe '), ('ChosePlan', 'The 3 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 3')]), OrderedDict([('PracticeDilemmas', '• You also know that the only other rescue boat in the area is much further to the west, so it would be unable to reach the people in the east\n\n• But there is a chance the rescue boat will reach the group drowning to the west'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 65%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 2 people in the east lived.\n\nThe '), ('ChosePlan', 'The 2 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 2')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nOR\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('PracticeLeftText', 'People drowning in the west: 12'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 12 people in the west were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• You are operating the switch at a railroad station when you see an empty, out of control boxcar coming down the main track\n\n• It is moving so fast that anyone it hits will die immediately'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation: 35%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• The boxcar is headed towards a tunneled section in which a group of repairmen are working\n\n• You can flip the switch, redirecting the boxcar to a sidetrack on which there is a smaller group of repairman working'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmenon the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• If you do nothing, the boxcar will continue toward the repairmen in the tunnel on the main track and kill them all\n\n• If you hit the switch, the repairmen on the main track will be spared but the other repairman on the sidetrack will be hit by the boxcar and will die'), ('PracticeLeftText', 'Repairmen on main track: 5'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 5 repairmen on the track were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• You know that there is a chance an alarm on the main track will be triggered in time to alert the repairmen to evacuate before the boxcar arrives\n\n• There is no such alarm on the sidetrack, and therefore no chance the workmen on the sidetrack would evacuate in time'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation:  50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 4 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 4 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nOR\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• There is a group of ice fishermen towards the north side of a large frozen lake\n\n• A group of scientists are on the south side of the lake drilling ice cores'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 6'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 3 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 3 fishermen on the south end died.\n\nThe 6 scientists on the north end were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '•The scientists sent out a distress call because the ice around them started to shatter and they have fallen into the freezing water\n\n• You are an emergency worker who has been called to rescue the scientists'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 14'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 fishermen on the south end died.\n\nThe 14 scientists on the north end were saved.'), ('GroupNumber', 14), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'EQUAL')]), OrderedDict([('PracticeDilemmas', '• To reach the scientists in time, you would need to drive a vehicle across the ice, past the fishermen'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 5'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 5 customers in the main dining room were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'AD')]), OrderedDict([('PracticeDilemmas', '• If you do this, the weight of the vehicle would cause the ice to crack around the fishermen, causing them to fall into the water and die from the cold\n\n• You also know that there is a chance that the scientists may be able to climb out of the freezing water before going into shock and dying'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 7'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 65%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 7 customers in the main dining room were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'ad')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Drive to the scientists, causing the fishermen to fall into the water and die\n\nOR\n\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 9'), ('PracticeRightText', 'Probability  scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 customers on the patio died.\n\nThe 9 customers in the main dining room were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '• There has been a bomb planted in two buildings, drawing from the same set of wires\n\n• You are a citizen who has found the wires that control the bomb'), ('PracticeLeftText', 'Workers in the office building: 4'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 35%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 4 workers in the office building were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', '• The red wire is connected to the bomb in a small office building, which will explode if that wire is cut\n\n• The green wire is connected to the bomb in a small home, where a family lives, and will explode if that wire is cut '), ('PracticeLeftText', 'Workers in the office building: 7'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 65%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 7 workers in the office building were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• The time on the bomb is counting down, but you have time to cut one of the wires without risking harm to yourself \n\n• If you do nothing, the bomb will default to blow up the office building  '), ('PracticeLeftText', 'Workers in the office building: 13'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 13 workers in the office building were saved.'), ('GroupNumber', 13), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that the Bomb Squad will arrive in time to completely disable the bomb'), ('PracticeLeftText', 'Workers in the office building: 9'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 9 workers in the office building were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Cut the green wire, blowing up the family in the home\n\nOR\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('PracticeLeftText', 'Workers in the office building: 6'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 2 family members lived.\n\nThe '), ('ChosePlan', 'The 2 family members in the home died. \n\nThe 6 workers in the office building were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 2')]), OrderedDict([('PracticeDilemmas', '•You are a worker on a large submarine\n\n• The upper section of the submarine has a hole in it that is gradually letting water in'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 8'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 35%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 8 passengers were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a group of passengers in the upper section of the submarine, who are beginning to drown\n\n • The way out is through the lower section, where a group of crewmembers are working'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe  '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 5')]), OrderedDict([('PracticeDilemmas', ' • There is an emergency access hatch between the upper and lower sections of the ship\n\n• You can press an emergency switch, which would open the hatch but in doing so would crush and kill the crewmembers who are working below it\n'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 7'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 7 passengers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a chance that one of the passengers will break a window, allowing them to escape and swim to the surface'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 9'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 65%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 8 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 8 crewmembers died.\n\nThe 9 passengers were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 8')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Open the hatch, killing the crewmembers there\n\nOR\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• You are working in a security room of a zoo and can see all of the exhibits through the security cameras\n\n• You see that a group of tourists have gone beyond a safety gate and are now stuck in the right side of a lion enclosure, with a lion gradually approaching them '), ('PracticeLeftText', 'Tourists in the enclosure: 11'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 3 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 3 zookeepers died. \n\nThe 11 tourists in the enclosure escaped.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 3')]), OrderedDict([('PracticeDilemmas', '• You also see that there are also zookeepers on the left side of the enclosure who are cleaning the area\n\n• You can release bait to get the lion’s attention using your security console, but you can only direct the lion’s attention in one direction'), ('PracticeLeftText', 'Tourists in the enclosure: 4'), ('PracticeRightText', 'Probability the tourists\nwill escape: 35%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 4 tourists in the enclosure escaped.'), ('GroupNumber', 4), ('GroupProb', 50), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• There is a single ladder in the middle of the enclosure which leads to safety\n\n•  If you throw the bait in the direction of the zookeepers, the lion will definitely attack and kill the zookeepers, but the tourists will be able to escape to safety '), ('PracticeLeftText', 'Tourists in the enclosure: 7'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 7  tourists in the enclosure escaped.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• However, there is a chance that the tourists will make it to the ladder before the lion reaches them. '), ('PracticeLeftText', 'Tourists in the enclosure: 8'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 5 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 5 zookeepers died. \n\nThe 8 tourists in the enclosure escaped.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Throw the bait to the left, leaving the zookeepers to die\n\nOR\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('PracticeLeftText', 'Tourists in the enclosure: 3'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 3 tourists in the enclosure escaped.'), ('GroupNumber', 3), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '•There is a live wire dangling from an electric pole\n\n• There is an electrician at the top of the pole trying to gather the wire before it falls into a pool below, where a group of people are swimming'), ('PracticeLeftText', 'People in the swimming \n pool: 13'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 9 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 9 pedestrians died.\n\nThe 13 people in the swimming pool were saved.'), ('GroupNumber', 13), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 9')]), OrderedDict([('PracticeDilemmas', '•There is a sizeable rock on the ground near you, which you can throw at the wire to redirect where it falls\n\n'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', '•  If you do this, the wire will land on a group of pedestrians on the sidewalk, electrocuting and killing them'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 65%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• However, the electrician might be able to catch the wire before it falls'), ('PracticeLeftText', 'People in the swimming \npool: 7'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 7 people in the swimming pool were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nPlan: Throw the rock, redirecting the wire and killing the pedestrians\n\nOR\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('PracticeLeftText', 'People in the swimming \npool: 6'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 6 people in the swimming pool were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• You are working on a ship when you see a large group of sharks in the distance heading towards a team of scuba divers\n\n• You know that when the sharks reach this group they will encircle them and kill them all '), ('PracticeLeftText', 'Scuba divers in team: 10'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 10 far scuba divers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is another group of scuba divers who are closer to you and currently not in the path of the sharks \n\n• If you throw bait at this group of divers, the sharks will smell blood and switch trajectory away from the far team of divers, but killing the closer group of divers'), ('PracticeLeftText', 'Scuba divers in team: 5'), ('PracticeRightText', 'Probability EM pulse\nwill function: 65%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 5 far scuba divers were saved.'), ('GroupNumber', 5), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• If you throw bait at the close divers, all of the far divers will be spared'), ('PracticeLeftText', 'Scuba divers in team: 7'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 5 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 5 close scuba divers died.\n\nThe 7 far scuba divers were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 5')]), OrderedDict([('PracticeDilemmas', &quot;• You also know that the far divers are carrying an electromagnetic (EM) pulse that will deter the sharks, but given the team's current depth there is only a small chance that the pulse will function \n\n• In order to ensure that the group will be spared, you must throw the bait now&quot;), ('PracticeLeftText', 'Scuba divers in team: 8'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 6 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 6 close scuba divers died.\n\nThe 8 far scuba divers were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine what course of action you will take. '), ('PracticeLeftText', 'Scuba divers in team: 6'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 4 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 4 close scuba divers died.\n\nThe 6 far scuba divers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 4')]), OrderedDict([('PracticeDilemmas', '• You are standing on a footbridge that is going over train tracks\n\n• Below you see a car has gotten stuck on the train tracks, and a train is quickly approaching'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 50), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', '• There is a small group of pedestrians leaning over the footbridge\n\n• You know that if you push the pedestrians over the bridge, they will hit the oncoming train, causing it to stop before it reaches the car'), ('PracticeLeftText', 'People in the car: 8'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 8 people in the car were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is some chance the people in the car will be able to escape before the train comes\n\n• If you push the pedestrians, they will certainly fall to their deaths'), ('PracticeLeftText', 'People in the car: 4'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 65%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 4 people in the car were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• In order to ensure the people in the car will be saved, you would have to push the pedestrians now'), ('PracticeLeftText', 'People in the car: 6'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 6 people in the car were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will\n\nImplement the plan: Push the pedestrians over, causing them to hit the train and die\n\nOR\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 3')]), OrderedDict([('PracticeDilemmas', '• Engineers and astronauts are doing maintenance repairs on a space station, and you are overseeing the repairs from a control center on Earth\n\n•A fire suddenly breaks out in the cargo bay of the space station, adjacent to where the engineers are working'), ('PracticeLeftText', 'Engineers near the cargo bay: 10'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 7 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 7 astronauts died.\n\nThe 10 engineers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 7')]), OrderedDict([('PracticeDilemmas', '• There is a group of astronauts doing repairs outside of the space craft\n\n•  You know that you could press a button that opens the cargo bay door to open, which would immediately extinguish the fire'), ('PracticeLeftText', 'Engineers near the cargo bay: 6'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 6 engineers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', '• If you do this, the impact of flying debris from inside of the cargo bay would kill the astronauts who are working outside of the space craft\n\n• You also know that there is some chance the engineers may be able to put out the fire before a deadly explosion occurs'), ('PracticeLeftText', 'Engineers near the cargo bay: 8'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 8 engineers were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')]), OrderedDict([('PracticeDilemmas', &quot;• To ensure the engineers' safety, you would have to push the button now&quot;), ('PracticeLeftText', 'Engineers near the cargo bay: 11'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 11 engineers were saved.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Push the button, putting out the fire but killing the astronauts\n\nOR\n\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('PracticeLeftText', 'Engineers near the cargo bay: 7'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 50%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 7 engineers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="PracticeMoralSelfReg.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PracticeQs" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="PracticeDilemmas_2"/>
    <LoopTerminator name="PracticeQs"/>
    <Routine name="ISI"/>
    <LoopInitiator loopType="TrialHandler" name="practiceAs">
      <Param name="Selected rows" updates="None" val="0:5" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('PracticeDilemmas', &quot;• You are the head of a safety crew that has been alerted about a group of skydivers that is wearing defective parachutes and is currently in a freefall \n\n• You've arrived in time to see that a group of divers is holding onto one another and will fall to their death a few feet to your right unless your crew's trampoline is moved beneath them&quot;), ('PracticeLeftText', 'Skydivers on right: 6'), ('PracticeRightText', 'Probability of \nparachute opening: 35% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 6 skydivers on the right were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', &quot;• Your crew sees a smaller group of divers apart from the rest who are much closer to reaching the ground, and instinctively moves a few feet to the left to catch them\n\n• You know that there won't be enough time to reach the group on the right if you wait to catch the group on the left&quot;), ('PracticeLeftText', 'Skydivers on right: 9'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 4 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 4 skydivers on the left died.\n\nThe 9 skydivers on the right were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 4')]), OrderedDict([('PracticeDilemmas', &quot;• If nothing is done, the safety crew will catch the divers to the left, avoiding their death, but the separate group of divers will land on the ground, causing their deaths\n\n• You can re-direct your crew to the right, preventing the death of the group, but the divers on the left won't be caught&quot;), ('PracticeLeftText', 'Skydivers on right: 5'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 2 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 2 skydivers on the left died.\n\nThe 5 skydivers on the right were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that one of the parachutes of the group will still open in time to prevent all of their deaths\n\n• There is no chance that the parachute will open for the one diver, given how close he is to the ground'), ('PracticeLeftText', 'Skydivers on right: 4'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 4 skydivers on the right were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan:  Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nOR\n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('PracticeLeftText', 'Skydivers on right: 8'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 5 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 5 skydivers on the left died.\n\nThe 8 skydivers on the right were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 5')]), OrderedDict([('PracticeDilemmas', &quot;• There has been an accident in the basement of an office building\n\n• A pipe has broken and is releasing a lethal gas into the building's ventilation system&quot;), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 35%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 3 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 3 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 3')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the gas will travel upward to Room A and cause the death of all workers there\n\n• You are the building manager'), ('PracticeLeftText', 'Workers in Room A: 10'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 10 workers in Room A were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You know that the only way to avoid the deaths of the workers in Room A is to block the main vent immediately by hitting a button that will close one of the vent doors\n\n• You also know that if you close the vent door the gas will be diverted into a different room, Room B, and cause the death of the workers there'), ('PracticeLeftText', 'Workers in Room A: 6'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 6 workers in Room A were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are also aware that there is a chance that the workers in Room A will escape before the gas reaches them\n\n• This would be impossible for the workers in Room B'), ('PracticeLeftText', 'Workers in Room A: 12'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 6 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 6 workers in Room B died. \n\nThe 12 workers in Room A were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the button to divert the gas to Room B, killing the workers there\n\nOR\n\nDo nothing: The workers in Room B will live, the group on Room A has a chance of escaping.'), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are operating a crane in front of a tall bridge when an earthquake hits\n\n• As a result of the earthquake, a gap has formed in the bridge, and a bus carrying a number of people is now partially hanging off of this gap in the bridge\n'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the bus will soon plummet and all of these people will be killed\n\n• You know that you can move your crane in a way to push the bus back onto the bridge, avoiding  the deaths of all the people on board'), ('PracticeLeftText', 'People on bus: 9'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 6 people in the car lived.\n\nThe '), ('ChosePlan', 'The 6 people in the car died. \n\nThe 9 people on the bus were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 6')]), OrderedDict([('PracticeDilemmas', '• However, you are also aware that in its current position your crane is supporting one small part of the bridge on which there is currently a single car\n\n• If you move the crane, this part will certainly collapse and the people in that car will be killed'), ('PracticeLeftText', 'People on bus: 6'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 50%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 6 people on the bus were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance the bus will be able to drive back onto the bridge, preventing the deaths of everyone on board\n \n• There is no chance that the car will be able to avoid falling if you move your crane '), ('PracticeLeftText', 'People on bus: 10'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 65%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 7 people in the car lived.\n\nThe '), ('ChosePlan', 'The 7 people in the car died. \n\nThe 10 people on the bus were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 7')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Move your crane to push the bus, certainly killing the people in the car\n\nOR\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 4 people in the car lived.\n\nThe '), ('ChosePlan', 'The 4 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 4')]), OrderedDict([('PracticeDilemmas', '• You are driving a rescue boat in the ocean, heading east towards a group of drowning people\n\n• You receive a distress signal informing you that a small boat has capsized in the opposite direction'), ('PracticeLeftText', 'People drowning in the west: 11'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 5 people in the east lived.\n\nThe '), ('ChosePlan', 'The 5 people in the east died.\n\nThe 11 people in the west were saved.'), ('GroupNumber', 11), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 5')]), OrderedDict([('PracticeDilemmas', '• All of the people aboard the capsized boat are now drowning\n\n• You know that if you immediately change course and go full speed, bearing west, you will reach these people in time to save them'), ('PracticeLeftText', 'People drowning in the west: 10'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 35%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 10 people in the west were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• However, if you do this, the people drowning in the east will certainly die\n\n• If you do nothing and hold your course, the people in the east will be saved, but you will not reach the people to the west in time to save them'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 3 people in the east lived.\n\nThe '), ('ChosePlan', 'The 3 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 3')]), OrderedDict([('PracticeDilemmas', '• You also know that the only other rescue boat in the area is much further to the west, so it would be unable to reach the people in the east\n\n• But there is a chance the rescue boat will reach the group drowning to the west'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 65%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 2 people in the east lived.\n\nThe '), ('ChosePlan', 'The 2 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 2')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nOR\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('PracticeLeftText', 'People drowning in the west: 12'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 12 people in the west were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• You are operating the switch at a railroad station when you see an empty, out of control boxcar coming down the main track\n\n• It is moving so fast that anyone it hits will die immediately'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation: 35%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• The boxcar is headed towards a tunneled section in which a group of repairmen are working\n\n• You can flip the switch, redirecting the boxcar to a sidetrack on which there is a smaller group of repairman working'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmenon the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• If you do nothing, the boxcar will continue toward the repairmen in the tunnel on the main track and kill them all\n\n• If you hit the switch, the repairmen on the main track will be spared but the other repairman on the sidetrack will be hit by the boxcar and will die'), ('PracticeLeftText', 'Repairmen on main track: 5'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 5 repairmen on the track were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• You know that there is a chance an alarm on the main track will be triggered in time to alert the repairmen to evacuate before the boxcar arrives\n\n• There is no such alarm on the sidetrack, and therefore no chance the workmen on the sidetrack would evacuate in time'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation:  50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 4 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 4 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nOR\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• There is a group of ice fishermen towards the north side of a large frozen lake\n\n• A group of scientists are on the south side of the lake drilling ice cores'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 6'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 3 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 3 fishermen on the south end died.\n\nThe 6 scientists on the north end were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '•The scientists sent out a distress call because the ice around them started to shatter and they have fallen into the freezing water\n\n• You are an emergency worker who has been called to rescue the scientists'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 14'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 fishermen on the south end died.\n\nThe 14 scientists on the north end were saved.'), ('GroupNumber', 14), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'EQUAL')]), OrderedDict([('PracticeDilemmas', '• To reach the scientists in time, you would need to drive a vehicle across the ice, past the fishermen'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 5'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 5 customers in the main dining room were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'AD')]), OrderedDict([('PracticeDilemmas', '• If you do this, the weight of the vehicle would cause the ice to crack around the fishermen, causing them to fall into the water and die from the cold\n\n• You also know that there is a chance that the scientists may be able to climb out of the freezing water before going into shock and dying'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 7'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 65%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 7 customers in the main dining room were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'ad')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Drive to the scientists, causing the fishermen to fall into the water and die\n\nOR\n\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 9'), ('PracticeRightText', 'Probability  scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 customers on the patio died.\n\nThe 9 customers in the main dining room were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '• There has been a bomb planted in two buildings, drawing from the same set of wires\n\n• You are a citizen who has found the wires that control the bomb'), ('PracticeLeftText', 'Workers in the office building: 4'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 35%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 4 workers in the office building were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', '• The red wire is connected to the bomb in a small office building, which will explode if that wire is cut\n\n• The green wire is connected to the bomb in a small home, where a family lives, and will explode if that wire is cut '), ('PracticeLeftText', 'Workers in the office building: 7'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 65%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 7 workers in the office building were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• The time on the bomb is counting down, but you have time to cut one of the wires without risking harm to yourself \n\n• If you do nothing, the bomb will default to blow up the office building  '), ('PracticeLeftText', 'Workers in the office building: 13'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 13 workers in the office building were saved.'), ('GroupNumber', 13), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that the Bomb Squad will arrive in time to completely disable the bomb'), ('PracticeLeftText', 'Workers in the office building: 9'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 9 workers in the office building were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Cut the green wire, blowing up the family in the home\n\nOR\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('PracticeLeftText', 'Workers in the office building: 6'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 2 family members lived.\n\nThe '), ('ChosePlan', 'The 2 family members in the home died. \n\nThe 6 workers in the office building were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 2')]), OrderedDict([('PracticeDilemmas', '•You are a worker on a large submarine\n\n• The upper section of the submarine has a hole in it that is gradually letting water in'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 8'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 35%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 8 passengers were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a group of passengers in the upper section of the submarine, who are beginning to drown\n\n • The way out is through the lower section, where a group of crewmembers are working'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe  '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 5')]), OrderedDict([('PracticeDilemmas', ' • There is an emergency access hatch between the upper and lower sections of the ship\n\n• You can press an emergency switch, which would open the hatch but in doing so would crush and kill the crewmembers who are working below it\n'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 7'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 7 passengers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a chance that one of the passengers will break a window, allowing them to escape and swim to the surface'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 9'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 65%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 8 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 8 crewmembers died.\n\nThe 9 passengers were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 8')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Open the hatch, killing the crewmembers there\n\nOR\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• You are working in a security room of a zoo and can see all of the exhibits through the security cameras\n\n• You see that a group of tourists have gone beyond a safety gate and are now stuck in the right side of a lion enclosure, with a lion gradually approaching them '), ('PracticeLeftText', 'Tourists in the enclosure: 11'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 3 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 3 zookeepers died. \n\nThe 11 tourists in the enclosure escaped.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 3')]), OrderedDict([('PracticeDilemmas', '• You also see that there are also zookeepers on the left side of the enclosure who are cleaning the area\n\n• You can release bait to get the lion’s attention using your security console, but you can only direct the lion’s attention in one direction'), ('PracticeLeftText', 'Tourists in the enclosure: 4'), ('PracticeRightText', 'Probability the tourists\nwill escape: 35%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 4 tourists in the enclosure escaped.'), ('GroupNumber', 4), ('GroupProb', 50), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• There is a single ladder in the middle of the enclosure which leads to safety\n\n•  If you throw the bait in the direction of the zookeepers, the lion will definitely attack and kill the zookeepers, but the tourists will be able to escape to safety '), ('PracticeLeftText', 'Tourists in the enclosure: 7'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 7  tourists in the enclosure escaped.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• However, there is a chance that the tourists will make it to the ladder before the lion reaches them. '), ('PracticeLeftText', 'Tourists in the enclosure: 8'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 5 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 5 zookeepers died. \n\nThe 8 tourists in the enclosure escaped.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Throw the bait to the left, leaving the zookeepers to die\n\nOR\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('PracticeLeftText', 'Tourists in the enclosure: 3'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 3 tourists in the enclosure escaped.'), ('GroupNumber', 3), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '•There is a live wire dangling from an electric pole\n\n• There is an electrician at the top of the pole trying to gather the wire before it falls into a pool below, where a group of people are swimming'), ('PracticeLeftText', 'People in the swimming \n pool: 13'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 9 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 9 pedestrians died.\n\nThe 13 people in the swimming pool were saved.'), ('GroupNumber', 13), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 9')]), OrderedDict([('PracticeDilemmas', '•There is a sizeable rock on the ground near you, which you can throw at the wire to redirect where it falls\n\n'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', '•  If you do this, the wire will land on a group of pedestrians on the sidewalk, electrocuting and killing them'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 65%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• However, the electrician might be able to catch the wire before it falls'), ('PracticeLeftText', 'People in the swimming \npool: 7'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 7 people in the swimming pool were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nPlan: Throw the rock, redirecting the wire and killing the pedestrians\n\nOR\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('PracticeLeftText', 'People in the swimming \npool: 6'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 6 people in the swimming pool were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• You are working on a ship when you see a large group of sharks in the distance heading towards a team of scuba divers\n\n• You know that when the sharks reach this group they will encircle them and kill them all '), ('PracticeLeftText', 'Scuba divers in team: 10'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 10 far scuba divers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is another group of scuba divers who are closer to you and currently not in the path of the sharks \n\n• If you throw bait at this group of divers, the sharks will smell blood and switch trajectory away from the far team of divers, but killing the closer group of divers'), ('PracticeLeftText', 'Scuba divers in team: 5'), ('PracticeRightText', 'Probability EM pulse\nwill function: 65%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 5 far scuba divers were saved.'), ('GroupNumber', 5), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• If you throw bait at the close divers, all of the far divers will be spared'), ('PracticeLeftText', 'Scuba divers in team: 7'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 5 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 5 close scuba divers died.\n\nThe 7 far scuba divers were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 5')]), OrderedDict([('PracticeDilemmas', &quot;• You also know that the far divers are carrying an electromagnetic (EM) pulse that will deter the sharks, but given the team's current depth there is only a small chance that the pulse will function \n\n• In order to ensure that the group will be spared, you must throw the bait now&quot;), ('PracticeLeftText', 'Scuba divers in team: 8'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 6 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 6 close scuba divers died.\n\nThe 8 far scuba divers were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine what course of action you will take. '), ('PracticeLeftText', 'Scuba divers in team: 6'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 4 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 4 close scuba divers died.\n\nThe 6 far scuba divers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 4')]), OrderedDict([('PracticeDilemmas', '• You are standing on a footbridge that is going over train tracks\n\n• Below you see a car has gotten stuck on the train tracks, and a train is quickly approaching'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 50), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', '• There is a small group of pedestrians leaning over the footbridge\n\n• You know that if you push the pedestrians over the bridge, they will hit the oncoming train, causing it to stop before it reaches the car'), ('PracticeLeftText', 'People in the car: 8'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 8 people in the car were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is some chance the people in the car will be able to escape before the train comes\n\n• If you push the pedestrians, they will certainly fall to their deaths'), ('PracticeLeftText', 'People in the car: 4'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 65%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 4 people in the car were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• In order to ensure the people in the car will be saved, you would have to push the pedestrians now'), ('PracticeLeftText', 'People in the car: 6'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 6 people in the car were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will\n\nImplement the plan: Push the pedestrians over, causing them to hit the train and die\n\nOR\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 3')]), OrderedDict([('PracticeDilemmas', '• Engineers and astronauts are doing maintenance repairs on a space station, and you are overseeing the repairs from a control center on Earth\n\n•A fire suddenly breaks out in the cargo bay of the space station, adjacent to where the engineers are working'), ('PracticeLeftText', 'Engineers near the cargo bay: 10'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 7 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 7 astronauts died.\n\nThe 10 engineers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 7')]), OrderedDict([('PracticeDilemmas', '• There is a group of astronauts doing repairs outside of the space craft\n\n•  You know that you could press a button that opens the cargo bay door to open, which would immediately extinguish the fire'), ('PracticeLeftText', 'Engineers near the cargo bay: 6'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 6 engineers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', '• If you do this, the impact of flying debris from inside of the cargo bay would kill the astronauts who are working outside of the space craft\n\n• You also know that there is some chance the engineers may be able to put out the fire before a deadly explosion occurs'), ('PracticeLeftText', 'Engineers near the cargo bay: 8'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 8 engineers were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')]), OrderedDict([('PracticeDilemmas', &quot;• To ensure the engineers' safety, you would have to push the button now&quot;), ('PracticeLeftText', 'Engineers near the cargo bay: 11'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 11 engineers were saved.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Push the button, putting out the fire but killing the astronauts\n\nOR\n\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('PracticeLeftText', 'Engineers near the cargo bay: 7'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 50%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 7 engineers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="PracticeMoralSelfReg.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practiceAs" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Cue"/>
    <Routine name="ISI"/>
    <Routine name="PracticeAnswers"/>
    <Routine name="ISI"/>
    <Routine name="Feedback"/>
    <Routine name="ISI"/>
    <LoopTerminator name="practiceAs"/>
    <LoopTerminator name="PracticeLoop"/>
    <Routine name="isi2"/>
    <Routine name="BeginInstr"/>
    <LoopInitiator loopType="TrialHandler" name="MainLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('rows2', '005:0010'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')]), OrderedDict([('rows2', '0010:015'), ('CueInstructions1', 'EMPHASIZE'), ('CueInstructions2', 'DE-EMPHASIZE')]), OrderedDict([('rows2', '015:020'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')]), OrderedDict([('rows2', '020:025'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')]), OrderedDict([('rows2', '025:030'), ('CueInstructions1', 'EMPHASIZE'), ('CueInstructions2', 'DE-EMPHASIZE')]), OrderedDict([('rows2', '030:035'), ('CueInstructions1', 'EMPHASIZE'), ('CueInstructions2', 'DE-EMPHASIZE')]), OrderedDict([('rows2', '035:040'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')]), OrderedDict([('rows2', '040:045'), ('CueInstructions1', 'EMPHASIZE'), ('CueInstructions2', 'DE-EMPHASIZE')]), OrderedDict([('rows2', '045:050'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')]), OrderedDict([('rows2', '050:055'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')]), OrderedDict([('rows2', '055:060'), ('CueInstructions1', 'EMPHASIZE'), ('CueInstructions2', 'DE-EMPHASIZE')]), OrderedDict([('rows2', '060:065'), ('CueInstructions1', 'DE-EMPHASIZE'), ('CueInstructions2', 'EMPHASIZE')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="moralRows2.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="MainLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <LoopInitiator loopType="TrialHandler" name="MainQs">
      <Param name="Selected rows" updates="None" val="$rows2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('PracticeDilemmas', &quot;• You are the head of a safety crew that has been alerted about a group of skydivers that is wearing defective parachutes and is currently in a freefall \n\n• You've arrived in time to see that a group of divers is holding onto one another and will fall to their death a few feet to your right unless your crew's trampoline is moved beneath them&quot;), ('PracticeLeftText', 'Skydivers on right: 6'), ('PracticeRightText', 'Probability of \nparachute opening: 35% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 6 skydivers on the right were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', &quot;• Your crew sees a smaller group of divers apart from the rest who are much closer to reaching the ground, and instinctively moves a few feet to the left to catch them\n\n• You know that there won't be enough time to reach the group on the right if you wait to catch the group on the left&quot;), ('PracticeLeftText', 'Skydivers on right: 9'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 4 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 4 skydivers on the left died.\n\nThe 9 skydivers on the right were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 4')]), OrderedDict([('PracticeDilemmas', &quot;• If nothing is done, the safety crew will catch the divers to the left, avoiding their death, but the separate group of divers will land on the ground, causing their deaths\n\n• You can re-direct your crew to the right, preventing the death of the group, but the divers on the left won't be caught&quot;), ('PracticeLeftText', 'Skydivers on right: 5'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 2 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 2 skydivers on the left died.\n\nThe 5 skydivers on the right were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that one of the parachutes of the group will still open in time to prevent all of their deaths\n\n• There is no chance that the parachute will open for the one diver, given how close he is to the ground'), ('PracticeLeftText', 'Skydivers on right: 4'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 4 skydivers on the right were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan:  Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nOR\n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('PracticeLeftText', 'Skydivers on right: 8'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 5 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 5 skydivers on the left died.\n\nThe 8 skydivers on the right were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 5')]), OrderedDict([('PracticeDilemmas', &quot;• There has been an accident in the basement of an office building\n\n• A pipe has broken and is releasing a lethal gas into the building's ventilation system&quot;), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 35%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 3 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 3 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 3')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the gas will travel upward to Room A and cause the death of all workers there\n\n• You are the building manager'), ('PracticeLeftText', 'Workers in Room A: 10'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 10 workers in Room A were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You know that the only way to avoid the deaths of the workers in Room A is to block the main vent immediately by hitting a button that will close one of the vent doors\n\n• You also know that if you close the vent door the gas will be diverted into a different room, Room B, and cause the death of the workers there'), ('PracticeLeftText', 'Workers in Room A: 6'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 6 workers in Room A were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are also aware that there is a chance that the workers in Room A will escape before the gas reaches them\n\n• This would be impossible for the workers in Room B'), ('PracticeLeftText', 'Workers in Room A: 12'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 6 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 6 workers in Room B died. \n\nThe 12 workers in Room A were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the button to divert the gas to Room B, killing the workers there\n\nOR\n\nDo nothing: The workers in Room B will live, the group on Room A has a chance of escaping.'), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are operating a crane in front of a tall bridge when an earthquake hits\n\n• As a result of the earthquake, a gap has formed in the bridge, and a bus carrying a number of people is now partially hanging off of this gap in the bridge\n'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the bus will soon plummet and all of these people will be killed\n\n• You know that you can move your crane in a way to push the bus back onto the bridge, avoiding  the deaths of all the people on board'), ('PracticeLeftText', 'People on bus: 9'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 6 people in the car lived.\n\nThe '), ('ChosePlan', 'The 6 people in the car died. \n\nThe 9 people on the bus were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 6')]), OrderedDict([('PracticeDilemmas', '• However, you are also aware that in its current position your crane is supporting one small part of the bridge on which there is currently a single car\n\n• If you move the crane, this part will certainly collapse and the people in that car will be killed'), ('PracticeLeftText', 'People on bus: 6'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 50%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 6 people on the bus were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance the bus will be able to drive back onto the bridge, preventing the deaths of everyone on board\n \n• There is no chance that the car will be able to avoid falling if you move your crane '), ('PracticeLeftText', 'People on bus: 10'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 65%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 7 people in the car lived.\n\nThe '), ('ChosePlan', 'The 7 people in the car died. \n\nThe 10 people on the bus were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 7')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Move your crane to push the bus, certainly killing the people in the car\n\nOR\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 4 people in the car lived.\n\nThe '), ('ChosePlan', 'The 4 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 4')]), OrderedDict([('PracticeDilemmas', '• You are driving a rescue boat in the ocean, heading east towards a group of drowning people\n\n• You receive a distress signal informing you that a small boat has capsized in the opposite direction'), ('PracticeLeftText', 'People drowning in the west: 11'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 5 people in the east lived.\n\nThe '), ('ChosePlan', 'The 5 people in the east died.\n\nThe 11 people in the west were saved.'), ('GroupNumber', 11), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 5')]), OrderedDict([('PracticeDilemmas', '• All of the people aboard the capsized boat are now drowning\n\n• You know that if you immediately change course and go full speed, bearing west, you will reach these people in time to save them'), ('PracticeLeftText', 'People drowning in the west: 10'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 35%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 10 people in the west were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• However, if you do this, the people drowning in the east will certainly die\n\n• If you do nothing and hold your course, the people in the east will be saved, but you will not reach the people to the west in time to save them'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 3 people in the east lived.\n\nThe '), ('ChosePlan', 'The 3 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 3')]), OrderedDict([('PracticeDilemmas', '• You also know that the only other rescue boat in the area is much further to the west, so it would be unable to reach the people in the east\n\n• But there is a chance the rescue boat will reach the group drowning to the west'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 65%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 2 people in the east lived.\n\nThe '), ('ChosePlan', 'The 2 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 2')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nOR\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('PracticeLeftText', 'People drowning in the west: 12'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 12 people in the west were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• You are operating the switch at a railroad station when you see an empty, out of control boxcar coming down the main track\n\n• It is moving so fast that anyone it hits will die immediately'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation: 35%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• The boxcar is headed towards a tunneled section in which a group of repairmen are working\n\n• You can flip the switch, redirecting the boxcar to a sidetrack on which there is a smaller group of repairman working'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmenon the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• If you do nothing, the boxcar will continue toward the repairmen in the tunnel on the main track and kill them all\n\n• If you hit the switch, the repairmen on the main track will be spared but the other repairman on the sidetrack will be hit by the boxcar and will die'), ('PracticeLeftText', 'Repairmen on main track: 5'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 5 repairmen on the track were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• You know that there is a chance an alarm on the main track will be triggered in time to alert the repairmen to evacuate before the boxcar arrives\n\n• There is no such alarm on the sidetrack, and therefore no chance the workmen on the sidetrack would evacuate in time'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation:  50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 4 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 4 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nOR\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• There is a group of ice fishermen towards the north side of a large frozen lake\n\n• A group of scientists are on the south side of the lake drilling ice cores'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 6'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 3 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 3 fishermen on the south end died.\n\nThe 6 scientists on the north end were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '•The scientists sent out a distress call because the ice around them started to shatter and they have fallen into the freezing water\n\n• You are an emergency worker who has been called to rescue the scientists'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 14'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 fishermen on the south end died.\n\nThe 14 scientists on the north end were saved.'), ('GroupNumber', 14), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'EQUAL')]), OrderedDict([('PracticeDilemmas', '• To reach the scientists in time, you would need to drive a vehicle across the ice, past the fishermen'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 5'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 5 customers in the main dining room were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'AD')]), OrderedDict([('PracticeDilemmas', '• If you do this, the weight of the vehicle would cause the ice to crack around the fishermen, causing them to fall into the water and die from the cold\n\n• You also know that there is a chance that the scientists may be able to climb out of the freezing water before going into shock and dying'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 7'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 65%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 7 customers in the main dining room were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'ad')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Drive to the scientists, causing the fishermen to fall into the water and die\n\nOR\n\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 9'), ('PracticeRightText', 'Probability  scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 customers on the patio died.\n\nThe 9 customers in the main dining room were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '• There has been a bomb planted in two buildings, drawing from the same set of wires\n\n• You are a citizen who has found the wires that control the bomb'), ('PracticeLeftText', 'Workers in the office building: 4'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 35%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 4 workers in the office building were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', '• The red wire is connected to the bomb in a small office building, which will explode if that wire is cut\n\n• The green wire is connected to the bomb in a small home, where a family lives, and will explode if that wire is cut '), ('PracticeLeftText', 'Workers in the office building: 7'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 65%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 7 workers in the office building were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• The time on the bomb is counting down, but you have time to cut one of the wires without risking harm to yourself \n\n• If you do nothing, the bomb will default to blow up the office building  '), ('PracticeLeftText', 'Workers in the office building: 13'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 13 workers in the office building were saved.'), ('GroupNumber', 13), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that the Bomb Squad will arrive in time to completely disable the bomb'), ('PracticeLeftText', 'Workers in the office building: 9'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 9 workers in the office building were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Cut the green wire, blowing up the family in the home\n\nOR\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('PracticeLeftText', 'Workers in the office building: 6'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 2 family members lived.\n\nThe '), ('ChosePlan', 'The 2 family members in the home died. \n\nThe 6 workers in the office building were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 2')]), OrderedDict([('PracticeDilemmas', '•You are a worker on a large submarine\n\n• The upper section of the submarine has a hole in it that is gradually letting water in'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 8'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 35%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 8 passengers were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a group of passengers in the upper section of the submarine, who are beginning to drown\n\n • The way out is through the lower section, where a group of crewmembers are working'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe  '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 5')]), OrderedDict([('PracticeDilemmas', ' • There is an emergency access hatch between the upper and lower sections of the ship\n\n• You can press an emergency switch, which would open the hatch but in doing so would crush and kill the crewmembers who are working below it\n'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 7'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 7 passengers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a chance that one of the passengers will break a window, allowing them to escape and swim to the surface'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 9'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 65%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 8 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 8 crewmembers died.\n\nThe 9 passengers were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 8')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Open the hatch, killing the crewmembers there\n\nOR\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• You are working in a security room of a zoo and can see all of the exhibits through the security cameras\n\n• You see that a group of tourists have gone beyond a safety gate and are now stuck in the right side of a lion enclosure, with a lion gradually approaching them '), ('PracticeLeftText', 'Tourists in the enclosure: 11'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 3 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 3 zookeepers died. \n\nThe 11 tourists in the enclosure escaped.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 3')]), OrderedDict([('PracticeDilemmas', '• You also see that there are also zookeepers on the left side of the enclosure who are cleaning the area\n\n• You can release bait to get the lion’s attention using your security console, but you can only direct the lion’s attention in one direction'), ('PracticeLeftText', 'Tourists in the enclosure: 4'), ('PracticeRightText', 'Probability the tourists\nwill escape: 35%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 4 tourists in the enclosure escaped.'), ('GroupNumber', 4), ('GroupProb', 50), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• There is a single ladder in the middle of the enclosure which leads to safety\n\n•  If you throw the bait in the direction of the zookeepers, the lion will definitely attack and kill the zookeepers, but the tourists will be able to escape to safety '), ('PracticeLeftText', 'Tourists in the enclosure: 7'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 7  tourists in the enclosure escaped.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• However, there is a chance that the tourists will make it to the ladder before the lion reaches them. '), ('PracticeLeftText', 'Tourists in the enclosure: 8'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 5 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 5 zookeepers died. \n\nThe 8 tourists in the enclosure escaped.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Throw the bait to the left, leaving the zookeepers to die\n\nOR\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('PracticeLeftText', 'Tourists in the enclosure: 3'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 3 tourists in the enclosure escaped.'), ('GroupNumber', 3), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '•There is a live wire dangling from an electric pole\n\n• There is an electrician at the top of the pole trying to gather the wire before it falls into a pool below, where a group of people are swimming'), ('PracticeLeftText', 'People in the swimming \n pool: 13'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 9 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 9 pedestrians died.\n\nThe 13 people in the swimming pool were saved.'), ('GroupNumber', 13), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 9')]), OrderedDict([('PracticeDilemmas', '•There is a sizeable rock on the ground near you, which you can throw at the wire to redirect where it falls\n\n'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', '•  If you do this, the wire will land on a group of pedestrians on the sidewalk, electrocuting and killing them'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 65%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• However, the electrician might be able to catch the wire before it falls'), ('PracticeLeftText', 'People in the swimming \npool: 7'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 7 people in the swimming pool were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nPlan: Throw the rock, redirecting the wire and killing the pedestrians\n\nOR\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('PracticeLeftText', 'People in the swimming \npool: 6'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 6 people in the swimming pool were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• You are working on a ship when you see a large group of sharks in the distance heading towards a team of scuba divers\n\n• You know that when the sharks reach this group they will encircle them and kill them all '), ('PracticeLeftText', 'Scuba divers in team: 10'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 10 far scuba divers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is another group of scuba divers who are closer to you and currently not in the path of the sharks \n\n• If you throw bait at this group of divers, the sharks will smell blood and switch trajectory away from the far team of divers, but killing the closer group of divers'), ('PracticeLeftText', 'Scuba divers in team: 5'), ('PracticeRightText', 'Probability EM pulse\nwill function: 65%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 5 far scuba divers were saved.'), ('GroupNumber', 5), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• If you throw bait at the close divers, all of the far divers will be spared'), ('PracticeLeftText', 'Scuba divers in team: 7'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 5 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 5 close scuba divers died.\n\nThe 7 far scuba divers were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 5')]), OrderedDict([('PracticeDilemmas', &quot;• You also know that the far divers are carrying an electromagnetic (EM) pulse that will deter the sharks, but given the team's current depth there is only a small chance that the pulse will function \n\n• In order to ensure that the group will be spared, you must throw the bait now&quot;), ('PracticeLeftText', 'Scuba divers in team: 8'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 6 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 6 close scuba divers died.\n\nThe 8 far scuba divers were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine what course of action you will take. '), ('PracticeLeftText', 'Scuba divers in team: 6'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 4 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 4 close scuba divers died.\n\nThe 6 far scuba divers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 4')]), OrderedDict([('PracticeDilemmas', '• You are standing on a footbridge that is going over train tracks\n\n• Below you see a car has gotten stuck on the train tracks, and a train is quickly approaching'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 50), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', '• There is a small group of pedestrians leaning over the footbridge\n\n• You know that if you push the pedestrians over the bridge, they will hit the oncoming train, causing it to stop before it reaches the car'), ('PracticeLeftText', 'People in the car: 8'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 8 people in the car were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is some chance the people in the car will be able to escape before the train comes\n\n• If you push the pedestrians, they will certainly fall to their deaths'), ('PracticeLeftText', 'People in the car: 4'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 65%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 4 people in the car were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• In order to ensure the people in the car will be saved, you would have to push the pedestrians now'), ('PracticeLeftText', 'People in the car: 6'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 6 people in the car were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will\n\nImplement the plan: Push the pedestrians over, causing them to hit the train and die\n\nOR\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 3')]), OrderedDict([('PracticeDilemmas', '• Engineers and astronauts are doing maintenance repairs on a space station, and you are overseeing the repairs from a control center on Earth\n\n•A fire suddenly breaks out in the cargo bay of the space station, adjacent to where the engineers are working'), ('PracticeLeftText', 'Engineers near the cargo bay: 10'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 7 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 7 astronauts died.\n\nThe 10 engineers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 7')]), OrderedDict([('PracticeDilemmas', '• There is a group of astronauts doing repairs outside of the space craft\n\n•  You know that you could press a button that opens the cargo bay door to open, which would immediately extinguish the fire'), ('PracticeLeftText', 'Engineers near the cargo bay: 6'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 6 engineers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', '• If you do this, the impact of flying debris from inside of the cargo bay would kill the astronauts who are working outside of the space craft\n\n• You also know that there is some chance the engineers may be able to put out the fire before a deadly explosion occurs'), ('PracticeLeftText', 'Engineers near the cargo bay: 8'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 8 engineers were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')]), OrderedDict([('PracticeDilemmas', &quot;• To ensure the engineers' safety, you would have to push the button now&quot;), ('PracticeLeftText', 'Engineers near the cargo bay: 11'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 11 engineers were saved.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Push the button, putting out the fire but killing the astronauts\n\nOR\n\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('PracticeLeftText', 'Engineers near the cargo bay: 7'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 50%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 7 engineers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="PracticeMoralSelfReg.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="MainQs" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="MainDilemmas"/>
    <LoopTerminator name="MainQs"/>
    <Routine name="ISI"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="$rows2" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('PracticeDilemmas', &quot;• You are the head of a safety crew that has been alerted about a group of skydivers that is wearing defective parachutes and is currently in a freefall \n\n• You've arrived in time to see that a group of divers is holding onto one another and will fall to their death a few feet to your right unless your crew's trampoline is moved beneath them&quot;), ('PracticeLeftText', 'Skydivers on right: 6'), ('PracticeRightText', 'Probability of \nparachute opening: 35% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 6 skydivers on the right were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', &quot;• Your crew sees a smaller group of divers apart from the rest who are much closer to reaching the ground, and instinctively moves a few feet to the left to catch them\n\n• You know that there won't be enough time to reach the group on the right if you wait to catch the group on the left&quot;), ('PracticeLeftText', 'Skydivers on right: 9'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 4 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 4 skydivers on the left died.\n\nThe 9 skydivers on the right were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 4')]), OrderedDict([('PracticeDilemmas', &quot;• If nothing is done, the safety crew will catch the divers to the left, avoiding their death, but the separate group of divers will land on the ground, causing their deaths\n\n• You can re-direct your crew to the right, preventing the death of the group, but the divers on the left won't be caught&quot;), ('PracticeLeftText', 'Skydivers on right: 5'), ('PracticeRightText', 'Probability of \nparachute opening: 50% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 2 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 2 skydivers on the left died.\n\nThe 5 skydivers on the right were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that one of the parachutes of the group will still open in time to prevent all of their deaths\n\n• There is no chance that the parachute will open for the one diver, given how close he is to the ground'), ('PracticeLeftText', 'Skydivers on right: 4'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 3 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 3 skydivers on the left died.\n\nThe 4 skydivers on the right were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan:  Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nOR\n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('PracticeLeftText', 'Skydivers on right: 8'), ('PracticeRightText', 'Probability of \nparachute opening: 65% '), ('Reminder', 'Plan: Direct your crew to the right, repositioning the trampoline and leaving the skydivers on the left to die \n\nDo nothing: The skydivers on the left will live, the group on the right  has a chance of surviving'), ('ChoseNothing', 'The 5 skydivers on the left were saved.\n \nThe '), ('ChosePlan', 'The 5 skydivers on the left died.\n\nThe 8 skydivers on the right were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' skydivers on the right'), ('sureGroupText', 'Skydivers on the left: 5')]), OrderedDict([('PracticeDilemmas', &quot;• There has been an accident in the basement of an office building\n\n• A pipe has broken and is releasing a lethal gas into the building's ventilation system&quot;), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 35%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 3 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 3 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 3')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the gas will travel upward to Room A and cause the death of all workers there\n\n• You are the building manager'), ('PracticeLeftText', 'Workers in Room A: 10'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 10 workers in Room A were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You know that the only way to avoid the deaths of the workers in Room A is to block the main vent immediately by hitting a button that will close one of the vent doors\n\n• You also know that if you close the vent door the gas will be diverted into a different room, Room B, and cause the death of the workers there'), ('PracticeLeftText', 'Workers in Room A: 6'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 6 workers in Room A were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are also aware that there is a chance that the workers in Room A will escape before the gas reaches them\n\n• This would be impossible for the workers in Room B'), ('PracticeLeftText', 'Workers in Room A: 12'), ('PracticeRightText', 'Probability of escape: 50%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 6 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 6 workers in Room B died. \n\nThe 12 workers in Room A were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the button to divert the gas to Room B, killing the workers there\n\nOR\n\nDo nothing: The workers in Room B will live, the group on Room A has a chance of escaping.'), ('PracticeLeftText', 'Workers in Room A: 5'), ('PracticeRightText', 'Probability of escape: 65%'), ('Reminder', 'Plan: Hit the button to divert the gas to Room B, killing the workers there\n\nDo nothing: The workers in Room B will live, the workers in Room A have a chance of escaping'), ('ChoseNothing', 'The 4 workers in Room B lived.\n\nThe '), ('ChosePlan', 'The 4 workers in Room B died. \n\nThe 5 workers in Room A were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' workers in Room A'), ('sureGroupText', 'Workers in Room B: 4')]), OrderedDict([('PracticeDilemmas', '• You are operating a crane in front of a tall bridge when an earthquake hits\n\n• As a result of the earthquake, a gap has formed in the bridge, and a bus carrying a number of people is now partially hanging off of this gap in the bridge\n'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• If nothing is done, the bus will soon plummet and all of these people will be killed\n\n• You know that you can move your crane in a way to push the bus back onto the bridge, avoiding  the deaths of all the people on board'), ('PracticeLeftText', 'People on bus: 9'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 6 people in the car lived.\n\nThe '), ('ChosePlan', 'The 6 people in the car died. \n\nThe 9 people on the bus were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 6')]), OrderedDict([('PracticeDilemmas', '• However, you are also aware that in its current position your crane is supporting one small part of the bridge on which there is currently a single car\n\n• If you move the crane, this part will certainly collapse and the people in that car will be killed'), ('PracticeLeftText', 'People on bus: 6'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 50%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 2 people in the car lived.\n\nThe '), ('ChosePlan', 'The 2 people in the car died. \n\nThe 6 people on the bus were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance the bus will be able to drive back onto the bridge, preventing the deaths of everyone on board\n \n• There is no chance that the car will be able to avoid falling if you move your crane '), ('PracticeLeftText', 'People on bus: 10'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 65%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 7 people in the car lived.\n\nThe '), ('ChosePlan', 'The 7 people in the car died. \n\nThe 10 people on the bus were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 7')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Move your crane to push the bus, certainly killing the people in the car\n\nOR\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('PracticeLeftText', 'People on bus: 7'), ('PracticeRightText', 'Probability bus will \ndrive to safety: 35%'), ('Reminder', 'Plan: Move your crane to push the bus, certainly killing the people in the car\n\nDo nothing: The people in the car will live, the people in the bus have a chance of surviving'), ('ChoseNothing', 'The 4 people in the car lived.\n\nThe '), ('ChosePlan', 'The 4 people in the car died. \n\nThe 7 people on the bus were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' people on the bus'), ('sureGroupText', 'People in the car: 4')]), OrderedDict([('PracticeDilemmas', '• You are driving a rescue boat in the ocean, heading east towards a group of drowning people\n\n• You receive a distress signal informing you that a small boat has capsized in the opposite direction'), ('PracticeLeftText', 'People drowning in the west: 11'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 5 people in the east lived.\n\nThe '), ('ChosePlan', 'The 5 people in the east died.\n\nThe 11 people in the west were saved.'), ('GroupNumber', 11), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 5')]), OrderedDict([('PracticeDilemmas', '• All of the people aboard the capsized boat are now drowning\n\n• You know that if you immediately change course and go full speed, bearing west, you will reach these people in time to save them'), ('PracticeLeftText', 'People drowning in the west: 10'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 35%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 10 people in the west were saved.'), ('GroupNumber', 10), ('GroupProb', 65), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• However, if you do this, the people drowning in the east will certainly die\n\n• If you do nothing and hold your course, the people in the east will be saved, but you will not reach the people to the west in time to save them'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 3 people in the east lived.\n\nThe '), ('ChosePlan', 'The 3 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 3')]), OrderedDict([('PracticeDilemmas', '• You also know that the only other rescue boat in the area is much further to the west, so it would be unable to reach the people in the east\n\n• But there is a chance the rescue boat will reach the group drowning to the west'), ('PracticeLeftText', 'People drowning in the west: 8'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 65%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 2 people in the east lived.\n\nThe '), ('ChosePlan', 'The 2 people in the east died.\n\nThe 8 people in the west were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 2')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nOR\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('PracticeLeftText', 'People drowning in the west: 12'), ('PracticeRightText', 'Probability of alternate \nrescue boat reaching them: 50%'), ('Reminder', 'Plan: Change your course to head towards the people in the west, leaving the people in the east to die\n\nDo nothing: The group in the east will live, the group in the west has a chance of surviving'), ('ChoseNothing', 'The 6 people in the east lived.\n\nThe '), ('ChosePlan', 'The 6 people in the east died.\n\nThe 12 people in the west were saved.'), ('GroupNumber', 12), ('GroupProb', 50), ('Noun', ' people in the west'), ('sureGroupText', 'People drowning in \nthe east: 6')]), OrderedDict([('PracticeDilemmas', '• You are operating the switch at a railroad station when you see an empty, out of control boxcar coming down the main track\n\n• It is moving so fast that anyone it hits will die immediately'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation: 35%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• The boxcar is headed towards a tunneled section in which a group of repairmen are working\n\n• You can flip the switch, redirecting the boxcar to a sidetrack on which there is a smaller group of repairman working'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 3 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 3 repairmenon the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 3')]), OrderedDict([('PracticeDilemmas', '• If you do nothing, the boxcar will continue toward the repairmen in the tunnel on the main track and kill them all\n\n• If you hit the switch, the repairmen on the main track will be spared but the other repairman on the sidetrack will be hit by the boxcar and will die'), ('PracticeLeftText', 'Repairmen on main track: 5'), ('PracticeRightText', 'Probability of evacuation: 65%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 5 repairmen on the track were saved.'), ('GroupNumber', 5), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• You know that there is a chance an alarm on the main track will be triggered in time to alert the repairmen to evacuate before the boxcar arrives\n\n• There is no such alarm on the sidetrack, and therefore no chance the workmen on the sidetrack would evacuate in time'), ('PracticeLeftText', 'Repairmen on main track: 6'), ('PracticeRightText', 'Probability of evacuation:  50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 4 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 4 repairmen on the sidetrack died.\n\nThe 6 repairmen on the track were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nOR\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('PracticeLeftText', 'Repairmen on main track: 7'), ('PracticeRightText', 'Probability of evacuation: 50%'), ('Reminder', 'Plan: Hit the switch, redirecting the boxcar onto the sidetrack, killing the repairmen there\n\nDo nothing: The repairmen on the sidetrack will live, the repairmen on the main track have a chance of evacuating'), ('ChoseNothing', 'The 2 repairmen on the sidetrack lived.\n\nThe '), ('ChosePlan', 'The 2 repairmen on the sidetrack died.\n\nThe 7 repairmen on the track were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' repairmen on the main track'), ('sureGroupText', 'Repairmen on sidetrack: 2')]), OrderedDict([('PracticeDilemmas', '• There is a group of ice fishermen towards the north side of a large frozen lake\n\n• A group of scientists are on the south side of the lake drilling ice cores'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 6'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 3 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 3 fishermen on the south end died.\n\nThe 6 scientists on the north end were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '•The scientists sent out a distress call because the ice around them started to shatter and they have fallen into the freezing water\n\n• You are an emergency worker who has been called to rescue the scientists'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 14'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 fishermen on the south end died.\n\nThe 14 scientists on the north end were saved.'), ('GroupNumber', 14), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'EQUAL')]), OrderedDict([('PracticeDilemmas', '• To reach the scientists in time, you would need to drive a vehicle across the ice, past the fishermen'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 5'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 35%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 5 customers in the main dining room were saved.'), ('GroupNumber', 5), ('GroupProb', 50), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'AD')]), OrderedDict([('PracticeDilemmas', '• If you do this, the weight of the vehicle would cause the ice to crack around the fishermen, causing them to fall into the water and die from the cold\n\n• You also know that there is a chance that the scientists may be able to climb out of the freezing water before going into shock and dying'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 7'), ('PracticeRightText', 'Probability scientists will\nget out of the water: 65%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 2 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 2 customers on the patio died.\n\nThe 7 customers in the main dining room were saved.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'ad')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Drive to the scientists, causing the fishermen to fall into the water and die\n\nOR\n\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('PracticeLeftText', 'Scientists at the \nnorth end of lake: 9'), ('PracticeRightText', 'Probability  scientists will\nget out of the water: 50%'), ('Reminder', 'Plan: Drive to the scientists, causing the fishermen to fall into the water and die\nDo nothing: The fishermen will live,  the scientists may get out of the water in time'), ('ChoseNothing', 'The 7 fishermen on the south end lived.\n\nThe   '), ('ChosePlan', 'The 7 customers on the patio died.\n\nThe 9 customers in the main dining room were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', 'scientists at the north end of the lake'), ('sureGroupText', 'dis')]), OrderedDict([('PracticeDilemmas', '• There has been a bomb planted in two buildings, drawing from the same set of wires\n\n• You are a citizen who has found the wires that control the bomb'), ('PracticeLeftText', 'Workers in the office building: 4'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 35%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 4 workers in the office building were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', '• The red wire is connected to the bomb in a small office building, which will explode if that wire is cut\n\n• The green wire is connected to the bomb in a small home, where a family lives, and will explode if that wire is cut '), ('PracticeLeftText', 'Workers in the office building: 7'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 65%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 7 workers in the office building were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• The time on the bomb is counting down, but you have time to cut one of the wires without risking harm to yourself \n\n• If you do nothing, the bomb will default to blow up the office building  '), ('PracticeLeftText', 'Workers in the office building: 13'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 4 family members lived.\n\nThe '), ('ChosePlan', 'The 4 family members in the home died. \n\nThe 13 workers in the office building were saved.'), ('GroupNumber', 13), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 4')]), OrderedDict([('PracticeDilemmas', '• You also know that there is a chance that the Bomb Squad will arrive in time to completely disable the bomb'), ('PracticeLeftText', 'Workers in the office building: 9'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 3 family members lived.\n\nThe '), ('ChosePlan', 'The 3 family members in the home died. \n\nThe 9 workers in the office building were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Cut the green wire, blowing up the family in the home\n\nOR\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('PracticeLeftText', 'Workers in the office building: 6'), ('PracticeRightText', 'Probability the Bomb Squad\nwill arrive in time: 50%'), ('Reminder', 'Plan: Cut the green wire, blowing up the family in the home\n\nDo nothing: The family will live, the office workers have a chance of surviving if the Bomb Squad comes '), ('ChoseNothing', 'The 2 family members lived.\n\nThe '), ('ChosePlan', 'The 2 family members in the home died. \n\nThe 6 workers in the office building were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' workers in the office building'), ('sureGroupText', 'Family members in \nthe home: 2')]), OrderedDict([('PracticeDilemmas', '•You are a worker on a large submarine\n\n• The upper section of the submarine has a hole in it that is gradually letting water in'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 8'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 35%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 8 passengers were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a group of passengers in the upper section of the submarine, who are beginning to drown\n\n • The way out is through the lower section, where a group of crewmembers are working'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe  '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 5')]), OrderedDict([('PracticeDilemmas', ' • There is an emergency access hatch between the upper and lower sections of the ship\n\n• You can press an emergency switch, which would open the hatch but in doing so would crush and kill the crewmembers who are working below it\n'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 7'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 4 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 4 crewmembers died.\n\nThe 7 passengers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• There is a chance that one of the passengers will break a window, allowing them to escape and swim to the surface'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 9'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 65%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 8 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 8 crewmembers died.\n\nThe 9 passengers were saved.'), ('GroupNumber', 9), ('GroupProb', 65), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 8')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Open the hatch, killing the crewmembers there\n\nOR\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('PracticeLeftText', 'Passengers in the\nsubmarine: 6'), ('PracticeRightText', 'Probability the passengers will \nbreak open a window: 50%'), ('Reminder', 'Plan: Open the hatch, killing the crewmembers there\n\nDo nothing: The crewmembers in the lower section will live, the passengers have a chance of escape'), ('ChoseNothing', 'The 5 crewmembers lived.\n\nThe '), ('ChosePlan', 'The 5 crewmembers died.\n\nThe 6 passengers were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' passengers'), ('sureGroupText', 'Crewmembers in the \nlower section: 4')]), OrderedDict([('PracticeDilemmas', '• You are working in a security room of a zoo and can see all of the exhibits through the security cameras\n\n• You see that a group of tourists have gone beyond a safety gate and are now stuck in the right side of a lion enclosure, with a lion gradually approaching them '), ('PracticeLeftText', 'Tourists in the enclosure: 11'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 3 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 3 zookeepers died. \n\nThe 11 tourists in the enclosure escaped.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 3')]), OrderedDict([('PracticeDilemmas', '• You also see that there are also zookeepers on the left side of the enclosure who are cleaning the area\n\n• You can release bait to get the lion’s attention using your security console, but you can only direct the lion’s attention in one direction'), ('PracticeLeftText', 'Tourists in the enclosure: 4'), ('PracticeRightText', 'Probability the tourists\nwill escape: 35%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 4 tourists in the enclosure escaped.'), ('GroupNumber', 4), ('GroupProb', 50), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• There is a single ladder in the middle of the enclosure which leads to safety\n\n•  If you throw the bait in the direction of the zookeepers, the lion will definitely attack and kill the zookeepers, but the tourists will be able to escape to safety '), ('PracticeLeftText', 'Tourists in the enclosure: 7'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 7  tourists in the enclosure escaped.'), ('GroupNumber', 7), ('GroupProb', 35), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '• However, there is a chance that the tourists will make it to the ladder before the lion reaches them. '), ('PracticeLeftText', 'Tourists in the enclosure: 8'), ('PracticeRightText', 'Probability the tourists\nwill escape: 50%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 5 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 5 zookeepers died. \n\nThe 8 tourists in the enclosure escaped.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Throw the bait to the left, leaving the zookeepers to die\n\nOR\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('PracticeLeftText', 'Tourists in the enclosure: 3'), ('PracticeRightText', 'Probability the tourists\nwill escape: 65%'), ('Reminder', 'Plan: Throw the bait to the left, leaving the zookeepers to die\n\nDo nothing: The zookeepers will live, the tourists have a chance of escaping up the ladder'), ('ChoseNothing', 'The 2 zookeepers lived.\n\nThe '), ('ChosePlan', 'The 2 zookeepers died. \n\nThe 3 tourists in the enclosure escaped.'), ('GroupNumber', 3), ('GroupProb', 65), ('Noun', ' tourists in the enclosure'), ('sureGroupText', 'Zookeepers in the \nenclosure: 2')]), OrderedDict([('PracticeDilemmas', '•There is a live wire dangling from an electric pole\n\n• There is an electrician at the top of the pole trying to gather the wire before it falls into a pool below, where a group of people are swimming'), ('PracticeLeftText', 'People in the swimming \n pool: 13'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 9 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 9 pedestrians died.\n\nThe 13 people in the swimming pool were saved.'), ('GroupNumber', 13), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 9')]), OrderedDict([('PracticeDilemmas', '•There is a sizeable rock on the ground near you, which you can throw at the wire to redirect where it falls\n\n'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', '•  If you do this, the wire will land on a group of pedestrians on the sidewalk, electrocuting and killing them'), ('PracticeLeftText', 'People in the swimming \npool: 9'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 65%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 9 people in the swimming pool were saved.'), ('GroupNumber', 9), ('GroupProb', 35), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• However, the electrician might be able to catch the wire before it falls'), ('PracticeLeftText', 'People in the swimming \npool: 7'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 35%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 4 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 4 pedestrians died.\n\nThe 7 people in the swimming pool were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 4')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nPlan: Throw the rock, redirecting the wire and killing the pedestrians\n\nOR\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('PracticeLeftText', 'People in the swimming \npool: 6'), ('PracticeRightText', 'Probability the wire\nwill be caught in time: 50%'), ('Reminder', 'Plan: Throw the rock, redirecting the wire and killing the pedestrians\n\nDo nothing: The pedestrians will live, the people in the swimming pool have a chance of surviving if the wire is caught'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died.\n\nThe 6 people in the swimming pool were saved.'), ('GroupNumber', 6), ('GroupProb', 50), ('Noun', ' people in the swimming pool'), ('sureGroupText', 'Pedestrians on the \nsidewalk: 3')]), OrderedDict([('PracticeDilemmas', '• You are working on a ship when you see a large group of sharks in the distance heading towards a team of scuba divers\n\n• You know that when the sharks reach this group they will encircle them and kill them all '), ('PracticeLeftText', 'Scuba divers in team: 10'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 10 far scuba divers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is another group of scuba divers who are closer to you and currently not in the path of the sharks \n\n• If you throw bait at this group of divers, the sharks will smell blood and switch trajectory away from the far team of divers, but killing the closer group of divers'), ('PracticeLeftText', 'Scuba divers in team: 5'), ('PracticeRightText', 'Probability EM pulse\nwill function: 65%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 2 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 2 close scuba divers died.\n\nThe 5 far scuba divers were saved.'), ('GroupNumber', 5), ('GroupProb', 35), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 2')]), OrderedDict([('PracticeDilemmas', '• If you throw bait at the close divers, all of the far divers will be spared'), ('PracticeLeftText', 'Scuba divers in team: 7'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 5 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 5 close scuba divers died.\n\nThe 7 far scuba divers were saved.'), ('GroupNumber', 7), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 5')]), OrderedDict([('PracticeDilemmas', &quot;• You also know that the far divers are carrying an electromagnetic (EM) pulse that will deter the sharks, but given the team's current depth there is only a small chance that the pulse will function \n\n• In order to ensure that the group will be spared, you must throw the bait now&quot;), ('PracticeLeftText', 'Scuba divers in team: 8'), ('PracticeRightText', 'Probability EM pulse\nwill function: 50%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 6 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 6 close scuba divers died.\n\nThe 8 far scuba divers were saved.'), ('GroupNumber', 8), ('GroupProb', 50), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 6')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine what course of action you will take. '), ('PracticeLeftText', 'Scuba divers in team: 6'), ('PracticeRightText', 'Probability EM pulse\nwill function: 35%'), ('Reminder', 'Plan: Throw bait at the close divers, leaving them to get eaten by sharks\n\nDo nothing: The close divers will live, the far divers have a chance of surviving'), ('ChoseNothing', 'The 4 close scuba divers were saved.\n \nThe  '), ('ChosePlan', 'The 4 close scuba divers died.\n\nThe 6 far scuba divers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', ' far scuba divers'), ('sureGroupText', 'Close scuba divers: 4')]), OrderedDict([('PracticeDilemmas', '• You are standing on a footbridge that is going over train tracks\n\n• Below you see a car has gotten stuck on the train tracks, and a train is quickly approaching'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 50), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', '• There is a small group of pedestrians leaning over the footbridge\n\n• You know that if you push the pedestrians over the bridge, they will hit the oncoming train, causing it to stop before it reaches the car'), ('PracticeLeftText', 'People in the car: 8'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 8 people in the car were saved.'), ('GroupNumber', 8), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• You also know that there is some chance the people in the car will be able to escape before the train comes\n\n• If you push the pedestrians, they will certainly fall to their deaths'), ('PracticeLeftText', 'People in the car: 4'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 65%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 2 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 2 pedestrians died,\n\nThe 4 people in the car were saved.'), ('GroupNumber', 4), ('GroupProb', 65), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 2')]), OrderedDict([('PracticeDilemmas', '• In order to ensure the people in the car will be saved, you would have to push the pedestrians now'), ('PracticeLeftText', 'People in the car: 6'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 50%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 5 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 5 pedestrians died,\n\nThe 6 people in the car were saved.'), ('GroupNumber', 6), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 5')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will\n\nImplement the plan: Push the pedestrians over, causing them to hit the train and die\n\nOR\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('PracticeLeftText', 'People in the car: 10'), ('PracticeRightText', 'Probability the people in the car \nwill be able to escape in time: 35%'), ('Reminder', 'Plan: Push the pedestrians over, causing them to hit the train and die\n\nDo nothing: The pedestrians will live, the people in the car have a chance of surviving'), ('ChoseNothing', 'The 3 pedestrians lived.\n\nThe '), ('ChosePlan', 'The 3 pedestrians died,\n\nThe 10 people in the car were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'people in the car'), ('sureGroupText', 'Pedestrians on the bridge: 3')]), OrderedDict([('PracticeDilemmas', '• Engineers and astronauts are doing maintenance repairs on a space station, and you are overseeing the repairs from a control center on Earth\n\n•A fire suddenly breaks out in the cargo bay of the space station, adjacent to where the engineers are working'), ('PracticeLeftText', 'Engineers near the cargo bay: 10'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 7 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 7 astronauts died.\n\nThe 10 engineers were saved.'), ('GroupNumber', 10), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 7')]), OrderedDict([('PracticeDilemmas', '• There is a group of astronauts doing repairs outside of the space craft\n\n•  You know that you could press a button that opens the cargo bay door to open, which would immediately extinguish the fire'), ('PracticeLeftText', 'Engineers near the cargo bay: 6'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 6 engineers were saved.'), ('GroupNumber', 6), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', '• If you do this, the impact of flying debris from inside of the cargo bay would kill the astronauts who are working outside of the space craft\n\n• You also know that there is some chance the engineers may be able to put out the fire before a deadly explosion occurs'), ('PracticeLeftText', 'Engineers near the cargo bay: 8'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 65%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 8 engineers were saved.'), ('GroupNumber', 8), ('GroupProb', 65), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')]), OrderedDict([('PracticeDilemmas', &quot;• To ensure the engineers' safety, you would have to push the button now&quot;), ('PracticeLeftText', 'Engineers near the cargo bay: 11'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 35%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 3 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 3 astronauts died.\n\nThe 11 engineers were saved.'), ('GroupNumber', 11), ('GroupProb', 35), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 3')]), OrderedDict([('PracticeDilemmas', 'Consider each of the following scenarios and, for each one, determine if you will:\n\nImplement the plan: Push the button, putting out the fire but killing the astronauts\n\nOR\n\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('PracticeLeftText', 'Engineers near the cargo bay: 7'), ('PracticeRightText', 'Probability the fire will be \nextinguished in time: 50%'), ('Reminder', 'Plan: Push the button, putting out the fire but killing the astronauts\nDo nothing: The astronauts will live, the engineers have a chance of surviving'), ('ChoseNothing', 'The 4 astronaunts lived.\n\nThe '), ('ChosePlan', 'The 4 astronauts died.\n\nThe 7 engineers were saved.'), ('GroupNumber', 7), ('GroupProb', 50), ('Noun', 'engineers'), ('sureGroupText', 'Astronauts in outer space: 4')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="PracticeMoralSelfReg.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Cue"/>
    <Routine name="ISI"/>
    <Routine name="MainAnswers_2"/>
    <Routine name="ISI"/>
    <Routine name="Feedback"/>
    <Routine name="ISI"/>
    <LoopTerminator name="trials_2"/>
    <LoopTerminator name="MainLoop"/>
    <Routine name="ThankYou"/>
  </Flow>
</PsychoPy2experiment>
