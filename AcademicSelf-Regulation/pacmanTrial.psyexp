<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="pacmanTrial" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="from random import choice&amp;#10;from turtle import *&amp;#10;from psychopy import sound, gui, visual, core, data, event, logging, clock&amp;#10;import collections&amp;#10;from psychopy.hardware import keyboard&amp;#10;&amp;#10;win = visual.Window(&amp;#10;    size=(1024, 768), fullscr=False, screen=0, &amp;#10;    winType='pyglet', allowGUI=False, allowStencil=False,&amp;#10;    monitor='testMonitor', color=[0,0,0], colorSpace='rgb',&amp;#10;    blendMode='avg', useFBO=True, &amp;#10;    units='height')&amp;#10;class vector(collections.Sequence):&amp;#10;    PRECISION = 6&amp;#10;&amp;#10;    __slots__ = ('_x', '_y', '_hash')&amp;#10;&amp;#10;    def __init__(self, x, y):&amp;#10;        self._hash = None&amp;#10;        self._x = round(x, self.PRECISION)&amp;#10;        self._y = round(y, self.PRECISION)&amp;#10;&amp;#10;    @property&amp;#10;    def x(self):&amp;#10;        return self._x&amp;#10;&amp;#10;    @x.setter&amp;#10;    def x(self, value):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot set x after hashing')&amp;#10;        self._x = round(value, self.PRECISION)&amp;#10;&amp;#10;    @property&amp;#10;    def y(self):&amp;#10;        return self._y&amp;#10;&amp;#10;    @y.setter&amp;#10;    def y(self, value):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot set y after hashing')&amp;#10;        self._y = round(value, self.PRECISION)&amp;#10;&amp;#10;    def __hash__(self):&amp;#10;        if self._hash is None:&amp;#10;            pair = (self.x, self.y)&amp;#10;            self._hash = hash(pair)&amp;#10;        return self._hash&amp;#10;&amp;#10;    def __len__(self):&amp;#10;&amp;#10;        return 2&amp;#10;&amp;#10;    def __getitem__(self, index):&amp;#10;        if index == 0:&amp;#10;            return self.x&amp;#10;        if index == 1:&amp;#10;            return self.y&amp;#10;        raise IndexError&amp;#10;&amp;#10;    def copy(self):&amp;#10;        type_self = type(self)&amp;#10;        return type_self(self.x, self.y)&amp;#10;&amp;#10;    def __eq__(self, other):&amp;#10;        if isinstance(other, vector):&amp;#10;            return self.x == other.x and self.y == other.y&amp;#10;        return NotImplemented&amp;#10;&amp;#10;    def __ne__(self, other):&amp;#10;        if isinstance(other, vector):&amp;#10;            return self.x != other.x or self.y != other.y&amp;#10;        return NotImplemented&amp;#10;&amp;#10;    def __iadd__(self, other):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot add vector after hashing')&amp;#10;        elif isinstance(other, vector):&amp;#10;            self.x += other.x&amp;#10;            self.y += other.y&amp;#10;        else:&amp;#10;            self.x += other&amp;#10;            self.y += other&amp;#10;        return self&amp;#10;&amp;#10;    def __add__(self, other):&amp;#10;        copy = self.copy()&amp;#10;        return copy.__iadd__(other)&amp;#10;&amp;#10;    __radd__ = __add__&amp;#10;&amp;#10;    def move(self, other):&amp;#10;        self.__iadd__(other)&amp;#10;&amp;#10;    def __isub__(self, other):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot subtract vector after hashing')&amp;#10;        elif isinstance(other, vector):&amp;#10;            self.x -= other.x&amp;#10;            self.y -= other.y&amp;#10;        else:&amp;#10;            self.x -= other&amp;#10;            self.y -= other&amp;#10;        return self&amp;#10;&amp;#10;    def __sub__(self, other):&amp;#10;        copy = self.copy()&amp;#10;        return copy.__isub__(other)&amp;#10;&amp;#10;    def __imul__(self, other):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot multiply vector after hashing')&amp;#10;        elif isinstance(other, vector):&amp;#10;            self.x *= other.x&amp;#10;            self.y *= other.y&amp;#10;        else:&amp;#10;            self.x *= other&amp;#10;            self.y *= other&amp;#10;        return self&amp;#10;&amp;#10;    def __mul__(self, other):&amp;#10;        copy = self.copy()&amp;#10;        return copy.__imul__(other)&amp;#10;&amp;#10;    __rmul__ = __mul__&amp;#10;&amp;#10;    def scale(self, other):&amp;#10;        self.__imul__(other)&amp;#10;&amp;#10;    def __itruediv__(self, other):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot divide vector after hashing')&amp;#10;        elif isinstance(other, vector):&amp;#10;            self.x /= other.x&amp;#10;            self.y /= other.y&amp;#10;        else:&amp;#10;            self.x /= other&amp;#10;            self.y /= other&amp;#10;        return self&amp;#10;&amp;#10;    def __truediv__(self, other):&amp;#10;        copy = self.copy()&amp;#10;        return copy.__itruediv__(other)&amp;#10;&amp;#10;    def __neg__(self):&amp;#10;        copy = self.copy()&amp;#10;        copy.x = -copy.x&amp;#10;        copy.y = -copy.y&amp;#10;        return copy&amp;#10;&amp;#10;    def __abs__(self):&amp;#10;        return (self.x ** 2 + self.y ** 2) ** 0.5&amp;#10;&amp;#10;    def rotate(self, angle):&amp;#10;        if self._hash is not None:&amp;#10;            raise ValueError('cannot rotate vector after hashing')&amp;#10;        radians = angle * math.pi / 180.0&amp;#10;        cosine = math.cos(radians)&amp;#10;        sine = math.sin(radians)&amp;#10;        x = self.x&amp;#10;        y = self.y&amp;#10;        self.x = x * cosine - y * sine&amp;#10;        self.y = y * cosine + x * sine&amp;#10;&amp;#10;    def __repr__(self):&amp;#10;        type_self = type(self)&amp;#10;        name = type_self.__name__&amp;#10;        return '{}({!r}, {!r})'.format(name, self.x, self.y)&amp;#10;&amp;#10;def floor(value, size, offset=200):&amp;#10;    return float(((value + offset) // size) * size - offset)&amp;#10;&amp;#10;&amp;#10;state = {'score': 0}&amp;#10;path = Turtle(visible=False)&amp;#10;writer = Turtle(visible=False)&amp;#10;aim = vector(5, 0)&amp;#10;pacman = vector(-40, -80)&amp;#10;ghosts = [&amp;#10;    [vector(-180, 160), vector(5, 0)],&amp;#10;    [vector(-180, -160), vector(0, 5)],&amp;#10;    [vector(100, 160), vector(0, -5)],&amp;#10;    [vector(100, -160), vector(-5, 0)],&amp;#10;]&amp;#10;tiles = [&amp;#10;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&amp;#10;]&amp;#10;defaultKeyboard = keyboard.Keyboard()&amp;#10;spaceKey = keyboard.Keyboard()&amp;#10;def displayEnd(textVar):&amp;#10;    display = visual.TextStim(win=win, text = textVar, font='Arial', pos=(-0.41, 0.15), color='white', height=0.06)&amp;#10;    display.setAutoDraw(True)&amp;#10;    if spaceKey.keys == 'space':&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;&amp;#10;def square(x, y):&amp;#10;    &quot;Draw square using path at (x, y).&quot;&amp;#10;    path.up()&amp;#10;    path.goto(x, y)&amp;#10;    path.down()&amp;#10;    path.begin_fill()&amp;#10;&amp;#10;    for count in range(4):&amp;#10;        path.forward(20)&amp;#10;        path.left(90)&amp;#10;&amp;#10;    path.end_fill()&amp;#10;&amp;#10;def offset(point):&amp;#10;    &quot;Return offset of point in tiles.&quot;&amp;#10;    x = (floor(point.x, 20) + 200) / 20&amp;#10;    y = (180 - floor(point.y, 20)) / 20&amp;#10;    index = int(x + y * 20)&amp;#10;    return index&amp;#10;&amp;#10;def valid(point):&amp;#10;    &quot;Return True if point is valid in tiles.&quot;&amp;#10;    index = offset(point)&amp;#10;&amp;#10;    if tiles[index] == 0:&amp;#10;        return False&amp;#10;&amp;#10;    index = offset(point + 19)&amp;#10;&amp;#10;    if tiles[index] == 0:&amp;#10;        return False&amp;#10;&amp;#10;    return point.x % 20 == 0 or point.y % 20 == 0&amp;#10;&amp;#10;def world():&amp;#10;    &quot;Draw world using path.&quot;&amp;#10;    bgcolor('black')&amp;#10;    path.color('blue')&amp;#10;&amp;#10;    for index in range(len(tiles)):&amp;#10;        tile = tiles[index]&amp;#10;&amp;#10;        if tile &gt; 0:&amp;#10;            x = (index % 20) * 20 - 200&amp;#10;            y = 180 - (index // 20) * 20&amp;#10;            square(x, y)&amp;#10;&amp;#10;            if tile == 1:&amp;#10;                path.up()&amp;#10;                path.goto(x + 10, y + 10)&amp;#10;                path.dot(2, 'white')&amp;#10;&amp;#10;def move():&amp;#10;    &quot;Move pacman and all ghosts.&quot;&amp;#10;    writer.undo()&amp;#10;    writer.write(state['score'])&amp;#10;&amp;#10;    clear()&amp;#10;&amp;#10;    if valid(pacman + aim):&amp;#10;        pacman.move(aim)&amp;#10;&amp;#10;    index = offset(pacman)&amp;#10;&amp;#10;    if tiles[index] == 1:&amp;#10;        tiles[index] = 2&amp;#10;        state['score'] += 1&amp;#10;        x = (index % 20) * 20 - 200&amp;#10;        y = 180 - (index // 20) * 20&amp;#10;        square(x, y)&amp;#10;&amp;#10;    up()&amp;#10;    goto(pacman.x + 10, pacman.y + 10)&amp;#10;    dot(20, 'yellow')&amp;#10;&amp;#10;    for point, course in ghosts:&amp;#10;        if valid(point + course):&amp;#10;            point.move(course)&amp;#10;        else:&amp;#10;            options = [&amp;#10;                vector(5, 0),&amp;#10;                vector(-5, 0),&amp;#10;                vector(0, 5),&amp;#10;                vector(0, -5),&amp;#10;            ]&amp;#10;            plan = choice(options)&amp;#10;            course.x = plan.x&amp;#10;            course.y = plan.y&amp;#10;&amp;#10;        up()&amp;#10;        goto(point.x + 10, point.y + 10)&amp;#10;        dot(20, 'red')&amp;#10;&amp;#10;    update()&amp;#10;&amp;#10;    for point, course in ghosts:&amp;#10;        if abs(pacman - point) &lt; 20:&amp;#10;            print(&quot;You Died :(&quot;)&amp;#10;            bye()&amp;#10;#            endGame = 1&amp;#10;#            return False&amp;#10;#            bye()&amp;#10;#            continueRoutine = False&amp;#10;            displayEnd(&quot;Oh no! The game will restart soon&quot;)&amp;#10;            return&amp;#10;&amp;#10;    ontimer(move, 100)&amp;#10;&amp;#10;def change(x, y):&amp;#10;    &quot;Change pacman aim if valid.&quot;&amp;#10;    if valid(pacman + vector(x, y)):&amp;#10;        aim.x = x&amp;#10;        aim.y = y" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="pacmanClock = core.Clock()&amp;#10;finishTime = pacmanClock.getTime()&amp;#10;import time&amp;#10;def pacmanGame():&amp;#10;#    finishTime = time.time() + 60*1&amp;#10;#    while True:&amp;#10;&amp;#10;#        pacmanGame()&amp;#10;#        time.sleep(5)&amp;#10;#        exitonclick()&amp;#10;        while True:&amp;#10;            setup(420, 420, 370, 0)&amp;#10;            hideturtle()&amp;#10;            tracer(False)&amp;#10;            writer.goto(160, 160)&amp;#10;            writer.color('white')&amp;#10;            writer.write(state['score'])&amp;#10;            listen()&amp;#10;            onkey(lambda: change(5, 0), 'Right')&amp;#10;            onkey(lambda: change(-5, 0), 'Left')&amp;#10;            onkey(lambda: change(0, 5), 'Up')&amp;#10;            onkey(lambda: change(0, -5), 'Down')&amp;#10;            world()&amp;#10;            move()&amp;#10;            done()&amp;#10;#            hide()&amp;#10;#   &amp;#10;#    if finishTime &gt;= 60:&amp;#10;#        bye()&amp;#10;#import time&amp;#10;#import turtle as t&amp;#10;#finishTime = time.time() + 60*1&amp;#10;#while True:&amp;#10;##    finishTime = time.time() + 60*1&amp;#10;#    pacmanGame()&amp;#10;#&amp;#10;#    exitonclick()&amp;#10;#    if time.time() &gt; finishTime:&amp;#10;#        import turtle as t&amp;#10;#        t.bye()&amp;#10;pacmanGame()&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#if endGame == 1:&amp;#10;#    continueRoutine = False&amp;#10;#continueRoutine = False&amp;#10;#turtle.bye()&amp;#10;#tscreen = Screen()&amp;#10;#tscreen.exitonclick()&amp;#10;#" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="displayText">
      <TextComponent name="display">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="display" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="The game ended!&amp;#10;&amp;#10;Press SPACE to continue" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="inst">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press SPACE to begin!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="inst"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="displayText"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
