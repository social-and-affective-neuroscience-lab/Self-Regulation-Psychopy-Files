<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.0">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="pacman2" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#PACMAN&amp;#10;&amp;#10;from random import choice&amp;#10;from turtle import *&amp;#10;from freegames import floor, vector&amp;#10;&amp;#10;state = {'score': 0}&amp;#10;path = Turtle(visible=False)&amp;#10;writer = Turtle(visible=False)&amp;#10;aim = vector(5, 0)&amp;#10;pacman = vector(-40, -80)&amp;#10;ghosts = [&amp;#10;    [vector(-180, 160), vector(5, 0)],&amp;#10;    [vector(-180, -160), vector(0, 5)],&amp;#10;    [vector(100, 160), vector(0, -5)],&amp;#10;    [vector(100, -160), vector(-5, 0)],&amp;#10;]&amp;#10;tiles = [&amp;#10;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,&amp;#10;    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&amp;#10;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,&amp;#10;]&amp;#10;&amp;#10;def square(x, y):&amp;#10;    &quot;Draw square using path at (x, y).&quot;&amp;#10;    path.up()&amp;#10;    path.goto(x, y)&amp;#10;    path.down()&amp;#10;    path.begin_fill()&amp;#10;&amp;#10;    for count in range(4):&amp;#10;        path.forward(20)&amp;#10;        path.left(90)&amp;#10;&amp;#10;    path.end_fill()&amp;#10;&amp;#10;def offset(point):&amp;#10;    &quot;Return offset of point in tiles.&quot;&amp;#10;    x = (floor(point.x, 20) + 200) / 20&amp;#10;    y = (180 - floor(point.y, 20)) / 20&amp;#10;    index = int(x + y * 20)&amp;#10;    return index&amp;#10;&amp;#10;def valid(point):&amp;#10;    &quot;Return True if point is valid in tiles.&quot;&amp;#10;    index = offset(point)&amp;#10;&amp;#10;    if tiles[index] == 0:&amp;#10;        return False&amp;#10;&amp;#10;    index = offset(point + 19)&amp;#10;&amp;#10;    if tiles[index] == 0:&amp;#10;        return False&amp;#10;&amp;#10;    return point.x % 20 == 0 or point.y % 20 == 0&amp;#10;&amp;#10;def world():&amp;#10;    &quot;Draw world using path.&quot;&amp;#10;    bgcolor('black')&amp;#10;    path.color('blue')&amp;#10;&amp;#10;    for index in range(len(tiles)):&amp;#10;        tile = tiles[index]&amp;#10;&amp;#10;        if tile &gt; 0:&amp;#10;            x = (index % 20) * 20 - 200&amp;#10;            y = 180 - (index // 20) * 20&amp;#10;            square(x, y)&amp;#10;&amp;#10;            if tile == 1:&amp;#10;                path.up()&amp;#10;                path.goto(x + 10, y + 10)&amp;#10;                path.dot(2, 'white')&amp;#10;&amp;#10;def move():&amp;#10;    &quot;Move pacman and all ghosts.&quot;&amp;#10;    writer.undo()&amp;#10;    writer.write(state['score'])&amp;#10;&amp;#10;    clear()&amp;#10;&amp;#10;    if valid(pacman + aim):&amp;#10;        pacman.move(aim)&amp;#10;&amp;#10;    index = offset(pacman)&amp;#10;&amp;#10;    if tiles[index] == 1:&amp;#10;        tiles[index] = 2&amp;#10;        state['score'] += 1&amp;#10;        x = (index % 20) * 20 - 200&amp;#10;        y = 180 - (index // 20) * 20&amp;#10;        square(x, y)&amp;#10;&amp;#10;    up()&amp;#10;    goto(pacman.x + 10, pacman.y + 10)&amp;#10;    dot(20, 'yellow')&amp;#10;&amp;#10;    for point, course in ghosts:&amp;#10;        if valid(point + course):&amp;#10;            point.move(course)&amp;#10;        else:&amp;#10;            options = [&amp;#10;                vector(5, 0),&amp;#10;                vector(-5, 0),&amp;#10;                vector(0, 5),&amp;#10;                vector(0, -5),&amp;#10;            ]&amp;#10;            plan = choice(options)&amp;#10;            course.x = plan.x&amp;#10;            course.y = plan.y&amp;#10;&amp;#10;        up()&amp;#10;        goto(point.x + 10, point.y + 10)&amp;#10;        dot(20, 'red')&amp;#10;&amp;#10;    update()&amp;#10;&amp;#10;    for point, course in ghosts:&amp;#10;        if abs(pacman - point) &lt; 20:&amp;#10;            return&amp;#10;&amp;#10;    ontimer(move, 100)&amp;#10;&amp;#10;def change(x, y):&amp;#10;    &quot;Change pacman aim if valid.&quot;&amp;#10;    if valid(pacman + vector(x, y)):&amp;#10;        aim.x = x&amp;#10;        aim.y = y&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="setup(420, 420, 370, 0)&amp;#10;hideturtle()&amp;#10;tracer(False)&amp;#10;writer.goto(160, 160)&amp;#10;writer.color('white')&amp;#10;writer.write(state['score'])&amp;#10;listen()&amp;#10;onkey(lambda: change(5, 0), 'Right')&amp;#10;onkey(lambda: change(-5, 0), 'Left')&amp;#10;onkey(lambda: change(0, 5), 'Up')&amp;#10;onkey(lambda: change(0, -5), 'Down')&amp;#10;world()&amp;#10;move()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="done()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
