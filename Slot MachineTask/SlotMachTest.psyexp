<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="SlotMachTest" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="Instr">
      <TextComponent name="Instructions">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="Instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="In this part of the study, you will be making a series of monetary decisions.&amp;#10;&amp;#10;You will have the choice between taking a gamble or choosing a sure option. For each gamble, you will have a chance of either winning money, losing money, or gaining nothing, while the sure option guarantees a win or loss. &amp;#10;&amp;#10;You will be given regulation instructions prior to a block of trials. Please employ the strategy while making your decision. &amp;#10;&amp;#10;Press SPACE to continue. " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="space">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="space" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="intro">
        <Param name="Begin Experiment" updates="constant" val="import numpy&amp;#10;from numpy import random&amp;#10;&amp;#10;earnings = 0&amp;#10;earningsStr = &quot;$&quot; + '%.2f' % earnings&amp;#10;&amp;#10;subID = int(expInfo['participant'])&amp;#10;&amp;#10;FiftyGamble = [1,0]&amp;#10;SixtyGamble = [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]&amp;#10;ThirtyGamble = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;earning=0&amp;#10;chosenMoney = 0&amp;#10;&amp;#10;&amp;#10;#probability =[]&amp;#10;def gamProbability(gamProb):&amp;#10;    probs = int(gamProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        print('65% gamble')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% gamble')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% gamble')&amp;#10;def gambleFunc(gamProb):&amp;#10;    probs = int(gamProb)&amp;#10;    if probs == 65:&amp;#10;        probability = SixtyGamble&amp;#10;        #print('65% gamble')&amp;#10;    if probs == 35:&amp;#10;        probability = ThirtyGamble&amp;#10;        print('35% gamble')&amp;#10;    if probs == 50:&amp;#10;        probability = FiftyGamble&amp;#10;        print('50% gamble')&amp;#10;    result = random.choice(probability)&amp;#10;    print('gamble result:')&amp;#10;    print(result)&amp;#10;&amp;#10;def loseFunc(chosenMoney, earning):&amp;#10;    earning -= chosenMoney&amp;#10;    print('Lost Money earnings:')&amp;#10;    print(earning)&amp;#10;def winFunc(chosenMoney, earning):&amp;#10;    earning += chosenMoney&amp;#10;    print('Won money earnings:')&amp;#10;    print(earning)&amp;#10;&amp;#10;def earningsFunct(gamProb, chosenMoney, WinLossType, earning):&amp;#10;   if subID%2==0:   #gambles are on left side of screen&amp;#10;       if choice.keys == '1' and WinLossType== 1 : &amp;#10;           print('gambled during win condition')&amp;#10;           #gamProbability(gamProb)&amp;#10;           probs = int(gamProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)&amp;#10;           if result == 1:   #win&amp;#10;               earning += chosenMoney&amp;#10;               print('Won money earnings:')&amp;#10;               print(earning)&amp;#10;       #    if result == 0: #lose&amp;#10;        #       earnings += 0&amp;#10;   &amp;#10;       if choice.keys == '1' and WinLossType==0:  &amp;#10;           print('gambled during lose condition')&amp;#10;           #gamProbability(gamProb)&amp;#10;           probs = int(gamProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;        #print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)           &amp;#10;           if result == 1: #lose&amp;#10;               earning -= chosenMoney&amp;#10;               print('Lost Money earnings:')&amp;#10;               print(earning)&amp;#10;     #      if result == 0: #win&amp;#10;     #          earnings += 0&amp;#10;                &amp;#10;       if choice.keys == '2'and WinLossType ==1:&amp;#10;           print('did not gamble for win')&amp;#10;           earning += chosenMoney&amp;#10;           print('Won money earnings:')&amp;#10;           print(earning)       &amp;#10;       if choice.keys == '2' and WinLossType == 0: &amp;#10;           print('did not gamble for loss')&amp;#10;           earning -= chosenMoney&amp;#10;           print('Lost Money earnings:')&amp;#10;           print(earning)&amp;#10;&amp;#10;&amp;#10;   if subID%2==1:  #gambles are on right side of screen&amp;#10;       if choice.keys == '2' and WinLossType == 1: &amp;#10;           print('gambled during win condition')&amp;#10;           #gamProbability(gamProb)&amp;#10;           probs = int(gamProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)           &amp;#10;           if result == 1: #win&amp;#10;               winFunc(chosenMoney, earning)&amp;#10;    #       if result == 0: #lost&amp;#10;    #           earnings += 0&amp;#10;        &amp;#10;        &amp;#10;       if choice.keys == '2' and WinLossType == 0: &amp;#10;           print('gambled during lose condition')&amp;#10;           #gamProbability(gamProb)&amp;#10;           probs = int(gamProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)           &amp;#10;           if result == 1: #lose&amp;#10;               earning -= chosenMoney&amp;#10;               print('Lost Money earnings:')&amp;#10;               print(earning)&amp;#10;     #      if result == 0: #win&amp;#10;     #          earnings += 0&amp;#10;                &amp;#10;       if choice.keys == '1' and WinLossType == 1:&amp;#10;           print('did not gamble for win')&amp;#10;           earning += chosenMoney&amp;#10;           print('Won money earnings:')&amp;#10;           print(earning)&amp;#10;       if choice.keys == '1' and WinLossType == 0: &amp;#10;           print('did not gamble for lose condition')&amp;#10;           earning -= chosenMoney&amp;#10;           print('Lost Money earnings:')&amp;#10;           print(earning)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="earnings = 0&amp;#10;earningsStr = &quot;$&quot; + str(earnings)&amp;#10;subID = parseInt(expInfo['participant'])&amp;#10;&amp;#10;FiftyGamble = [1,0]&amp;#10;SixtyGamble = [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]&amp;#10;ThirtyGamble = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;earning=0&amp;#10;chosenMoney = 0" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="intro" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Inst2">
      <TextComponent name="instruct2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="instruct2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will be instructed to either &quot;DE-EMPHASIZE&quot; or &quot;EMPHASIZE.&quot; When you see the word &quot;DE-EMPHASIZE,&quot; we would like you to reinterpret the upcoming decision as one of many opportunities, and that the outcome is not very important. Try to think that the decision is not a big deal; you will have other chances.&amp;#10;&amp;#10;When you see the word &quot;EMPHASIZE&quot; we would like you to stress the importance of the upcoming decision. Please reinterpret the upcoming decision as very important and one in which you need to make the right choice. Try to think that it matters a lot what you choose. &amp;#10;&amp;#10;Press SPACE to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="enter">
        <Param name="allowedKeys" updates="constant" val="&quot;space&quot;" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="enter" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Practice">
      <PolygonComponent name="Line">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="set every repeat" val="7" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="Line" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="90" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="set every repeat" val="(3, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <KeyboardComponent name="choice">
        <Param name="allowedKeys" updates="set every repeat" val="'1','2'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="choice" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="GambleAmt">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.11" valType="code"/>
        <Param name="name" updates="None" val="GambleAmt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(-0.41, -0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="SureAmt">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.11" valType="code"/>
        <Param name="name" updates="None" val="SureAmt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0.41, -0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="GambleProb">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.13" valType="code"/>
        <Param name="name" updates="None" val="GambleProb" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(-0.41, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="SureProb">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="set every repeat" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="set every repeat" val="0.13" valType="code"/>
        <Param name="name" updates="None" val="SureProb" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0.41, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="&amp;#10;leftVarText=[]&amp;#10;leftVarMoney = []&amp;#10;rightVarText = []&amp;#10;rightVarMoney = []&amp;#10;result = []&amp;#10;&amp;#10;if (subID%2 == 1){&amp;#10;    leftVarText = (gambleWinLoss);&amp;#10;    leftVarMoney = (gamble);&amp;#10;    rightVarText = (sureWinLoss);&amp;#10;    rightVarMoney = (sure);&amp;#10;    }&amp;#10;if (subID%2 == 0){&amp;#10;    rightVarText= (gambleWinLoss);&amp;#10;    rightVarMoney= (gamble);&amp;#10;    leftVarText= (sureWinLoss);&amp;#10;    leftVarMoney= (sure);&amp;#10;    }&amp;#10;&amp;#10;GambleAmt.setText(leftVarMoney)&amp;#10;SureAmt.setText(rightVarMoney)&amp;#10;GambleProb.setText(leftVarText)&amp;#10;SureProb.setText(rightVarText)&amp;#10;&amp;#10;leftMoney = parseFloat(leftVarMoney[1:])&amp;#10;&amp;#10;rightMoney = parseFloat(rightVarMoney[1:])&amp;#10;&amp;#10;WinLossType = parseInt(WinLossCode)" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="feedbackVar = []&amp;#10;leftVarText=[]&amp;#10;leftVarMoney = []&amp;#10;rightVarText = []&amp;#10;rightVarMoney = []&amp;#10;result = []&amp;#10;&amp;#10;if subID%2 == 1 :&amp;#10;    leftVarText = (gambleWinLoss)&amp;#10;    leftVarMoney = (gamble)&amp;#10;    rightVarText = (sureWinLoss)&amp;#10;    rightVarMoney = (sure)&amp;#10;if subID%2 == 0:&amp;#10;    rightVarText= (gambleWinLoss)&amp;#10;    rightVarMoney= (gamble)&amp;#10;    leftVarText= (sureWinLoss)&amp;#10;    leftVarMoney= (sure)&amp;#10;&amp;#10;GambleAmtVar = &quot;$&quot; + '%.2f' % leftVarMoney&amp;#10;GambleAmt.setText(GambleAmtVar)&amp;#10;SureAmtVar = &quot;$&quot; + '%.2f' % rightVarMoney&amp;#10;SureAmt.setText(SureAmtVar)&amp;#10;GambleProb.setText(leftVarText)&amp;#10;SureProb.setText(rightVarText)&amp;#10;&amp;#10;leftMoney = float(leftVarMoney)&amp;#10;rightMoney = float(rightVarMoney)&amp;#10;WinLossType = int(WinLossCode)&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if choice.keys == '1':&amp;#10;    GambleAmt.setColor('green')&amp;#10;    chosenMoney = leftMoney&amp;#10;    choice.status = FINISHED&amp;#10;if choice.keys == '2':&amp;#10;    SureAmt.setColor('green')&amp;#10;    chosenMoney = rightMoney&amp;#10;    choice.status = FINISHED&amp;#10;    &amp;#10;if (choice.keys == '1' or choice.keys == '2') and blank.status == NOT_STARTED:&amp;#10;    blank.tStart = t&amp;#10;    blank.frameNStart = frameN&amp;#10;    blank.setAutoDraw(True)&amp;#10;#gamProbability(gambleProb)&amp;#10;#gambleFunc(gambleProb)&amp;#10;#earningsFunct(gambleProb, chosenMoney, WinLossCode, earnings)&amp;#10;#print(earnings)&amp;#10;&amp;#10;&amp;#10;&amp;#10;#earningsText.setText(earningsStr)&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="&amp;#10;if (choice.keys == '1'){&amp;#10;    GambleAmt.setColor('green');&amp;#10;    chosenMoney = leftMoney;&amp;#10;    }&amp;#10;if (choice.keys == '2'){&amp;#10;    SureAmt.setColor('green');&amp;#10;    chosenMoney = rightMoney;&amp;#10;    }&amp;#10;    &amp;#10;if ((choice.keys == '1' or choice.keys == '2') &amp;&amp; blank.status == NOT_STARTED){&amp;#10;    blank.tStart = t;&amp;#10;    blank.frameNStart = frameN;&amp;#10;    blank.setAutoDraw(true);&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="&amp;#10;if (choice.keys == '1'){&amp;#10;    chosenMoney = leftMoney;&amp;#10;    }&amp;#10;if (choice.keys == '2'){&amp;#10;    chosenMoney = rightMoney;&amp;#10;    }&amp;#10;if (choice.keys != None){&amp;#10;    if (subID%2==1){&amp;#10;       if (choice.keys == '1' &amp;&amp; WinLossCode== 1){&amp;#10;           print('gambled during win condition');&amp;#10;           probs = int(gambleProb);&amp;#10;           if (probs == 65){&amp;#10;               probability = SixtyGamble;&amp;#10;               print('65% gamble');&amp;#10;               }&amp;#10;           if (probs == 35){&amp;#10;               probability = ThirtyGamble;&amp;#10;               print('35% gamble');&amp;#10;               }&amp;#10;           if (probs == 50){&amp;#10;               probability = FiftyGamble;&amp;#10;               print('50% gamble');&amp;#10;               }&amp;#10;           result = random.choice(probability);&amp;#10;           print('gamble result:');&amp;#10;           print(result);&amp;#10;           }&amp;#10;           if (result == 1){&amp;#10;               earnings = earnings + chosenMoney;&amp;#10;               print('Won money earnings:');&amp;#10;               print(earnings);&amp;#10;           #    if result == 0: #lose&amp;#10;            #       earnings += 0&amp;#10;       &amp;#10;       if (choice.keys == '1' &amp;&amp; WinLossCode==0){  &amp;#10;           print('gambled during lose condition');&amp;#10;          #gamProbability(gamProb)&amp;#10;           probs = int(gambleProb);&amp;#10;           if (probs == 65){&amp;#10;               probability = SixtyGamble;&amp;#10;               print('65% gamble');&amp;#10;               }&amp;#10;           if (probs == 35){&amp;#10;               probability = ThirtyGamble;&amp;#10;               print('35% gamble');&amp;#10;               }&amp;#10;           if (probs == 50){&amp;#10;               probability = FiftyGamble;&amp;#10;               print('50% gamble');&amp;#10;               }&amp;#10;           result = random.choice(probability);&amp;#10;           print('gamble result:');&amp;#10;           print(result);&amp;#10;           }&amp;#10;           if (result == 1){&amp;#10;              earnings = earnings - chosenMoney;&amp;#10;              print('Lost Money earnings:');&amp;#10;              print(earnings);&amp;#10;              }&amp;#10;         #      if result == 0: #win&amp;#10;         #          earnings += 0&amp;#10;                    &amp;#10;       if (choice.keys == '2'&amp;&amp; WinLossCode ==1){  &amp;#10;           print('did not gamble for win condition');&amp;#10;           earnings = earnings + chosenMoney;&amp;#10;           print('Won sure money earnings:');&amp;#10;           print(earnings)       ;&amp;#10;           }&amp;#10;       if (choice.keys == '2' and WinLossCode == 0){&amp;#10;           earnings = earnings - chosenMoney;&amp;#10;           print('Lost sure Money earnings:');&amp;#10;           print(earnings);&amp;#10;           }&amp;#10;&amp;#10;&amp;#10;    if (subID%2==0){&amp;#10;       if (choice.keys == '2' &amp;&amp; WinLossCode == 1){ &amp;#10;           print('gambled during win condition');&amp;#10;           probs = int(gambleProb);&amp;#10;           }&amp;#10;           if (probs == 65){&amp;#10;               probability = SixtyGamble;&amp;#10;               print('65% gamble');&amp;#10;               }&amp;#10;           if (probs == 35){&amp;#10;               probability = ThirtyGamble;&amp;#10;               print('35% gamble');&amp;#10;           if (probs == 50){&amp;#10;               probability = FiftyGamble;&amp;#10;               print('50% gamble');&amp;#10;               }&amp;#10;           result = random.choice(probability);&amp;#10;           print('gamble result:');&amp;#10;           print(result);&amp;#10;           }&amp;#10;           if (result == 1){&amp;#10;               earnings = earnings + chosenMoney;&amp;#10;               print('won money earnings:');&amp;#10;               print(earnings);&amp;#10;               }&amp;#10;            &amp;#10;       if (choice.keys == '2' &amp;&amp; WinLossCode == 0){ &amp;#10;           print('gambled during lose condition');&amp;#10;           &amp;#10;           probs = int(gambleProb);&amp;#10;           }&amp;#10;           if (probs == 65){&amp;#10;               probability = SixtyGamble;&amp;#10;               print('65% gamble');&amp;#10;               }&amp;#10;           if (probs == 35){&amp;#10;               probability = ThirtyGamble;&amp;#10;               print('35% gamble');&amp;#10;               }&amp;#10;           if (probs == 50){&amp;#10;               probability = FiftyGamble;&amp;#10;               print('50% gamble');&amp;#10;               }&amp;#10;           result = random.choice(probability);&amp;#10;           print('gamble result:');&amp;#10;           print(result);&amp;#10;           }&amp;#10;           if (result == 1){&amp;#10;               earnings = earnings - chosenMoney;&amp;#10;               print('Lost Money earnings:');&amp;#10;               print(earnings);&amp;#10;               }&amp;#10;                    &amp;#10;       if (choice.keys == '1' &amp;&amp; WinLossCode == 1){ &amp;#10;           print('did not gamble during win condition');&amp;#10;           earnings = earnings + chosenMoney;&amp;#10;           print('Won sure money earnings:');&amp;#10;           print(earnings);&amp;#10;           }&amp;#10;       if (choice.keys == '1' &amp;&amp; WinLossCode == 0){ &amp;#10;           print('did not gamble for loss condition');&amp;#10;           earnings = earnings - chosenMoney;&amp;#10;           print('Lost sure Money earnings:');&amp;#10;           print(earnings);&amp;#10;           }&amp;#10;    earningsStr= str(earnings);&amp;#10;    earningsText.setText(earningsStr);&amp;#10;GambleAmt.setColor('white');&amp;#10;SureAmt.setColor('white');&amp;#10;&amp;#10;if (blank.status==FINISHED){&amp;#10;    GambleAmt.setAutoDraw(false);&amp;#10;    SureAmt.setAutoDraw(false);&amp;#10;    SureProb.setAutoDraw(false);&amp;#10;    GambleProb.setAutoDraw(false);&amp;#10;    Line.setAutoDraw(false);&amp;#10;    moneyBank.setAutoDraw(false);&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if choice.keys == '1':&amp;#10;    chosenMoney = leftMoney&amp;#10;if choice.keys == '2':&amp;#10;    chosenMoney = rightMoney&amp;#10;if choice.keys != None:&amp;#10;    if subID%2==1:   #gambles are on left side of screen&amp;#10;       if choice.keys == '1' and WinLossCode== 1 :  &amp;#10;           print('gambled during win condition')&amp;#10;           probs = int(gambleProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)&amp;#10;           if result == 1:   #win&amp;#10;               feedbackVar = 1 #gambled during win and won&amp;#10;               earnings = earnings + chosenMoney&amp;#10;               print('Won money earnings:')&amp;#10;               print(earnings)&amp;#10;           if result == 0: #lose&amp;#10;               feedbackVar = 3&amp;#10;            #       earnings += 0&amp;#10;       &amp;#10;       if choice.keys == '1' and WinLossCode==0:  &amp;#10;           print('gambled during lose condition')&amp;#10;          #gamProbability(gamProb)&amp;#10;           probs = int(gambleProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)           &amp;#10;           if result == 1: #lose&amp;#10;              feedbackVar = 2 #gambled during loss and lost&amp;#10;              earnings = earnings - chosenMoney&amp;#10;              print('Lost Money earnings:')&amp;#10;              print(earnings)&amp;#10;           if result == 0: #win&amp;#10;              feedbackVar = 3&amp;#10;         #          earnings += 0&amp;#10;                    &amp;#10;       if choice.keys == '2'and WinLossCode ==1:  &amp;#10;           print('did not gamble for win condition')&amp;#10;           earnings = earnings + chosenMoney&amp;#10;           feedbackVar = 1&amp;#10;           print('Won sure money earnings:')&amp;#10;           print(earnings)       &amp;#10;       if choice.keys == '2' and WinLossCode == 0: #did not gamble for lose condition&amp;#10;           earnings = earnings - chosenMoney&amp;#10;           feedbackVar = 2&amp;#10;           print('Lost sure Money earnings:')&amp;#10;           print(earnings)&amp;#10;&amp;#10;&amp;#10;    if subID%2==0:  #gambles are on right side of screen&amp;#10;       if choice.keys == '2' and WinLossCode == 1: &amp;#10;           print('gambled during win condition')&amp;#10;           probs = int(gambleProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)           &amp;#10;           if result == 1: #win&amp;#10;               feedbackVar = 1&amp;#10;               earnings = earnings + chosenMoney&amp;#10;               print('won money earnings:')&amp;#10;               print(earnings)&amp;#10;           if result == 0: #lost&amp;#10;               feedbackVar = 3&amp;#10;        #           earnings += 0&amp;#10;            &amp;#10;            &amp;#10;       if choice.keys == '2' and WinLossCode == 0: &amp;#10;           print('gambled during lose condition')&amp;#10;              #gamProbability(gamProb)&amp;#10;           probs = int(gambleProb)&amp;#10;           if probs == 65:&amp;#10;               probability = SixtyGamble&amp;#10;               print('65% gamble')&amp;#10;           if probs == 35:&amp;#10;               probability = ThirtyGamble&amp;#10;               print('35% gamble')&amp;#10;           if probs == 50:&amp;#10;               probability = FiftyGamble&amp;#10;               print('50% gamble')&amp;#10;           result = random.choice(probability)&amp;#10;           print('gamble result:')&amp;#10;           print(result)           &amp;#10;           if result == 1: #lose&amp;#10;               feedbackVar = 2&amp;#10;               earnings = earnings - chosenMoney&amp;#10;               print('Lost Money earnings:')&amp;#10;               print(earnings)&amp;#10;           if result == 0: #win&amp;#10;               feedbackVar = 3&amp;#10;         #          earnings += 0&amp;#10;                    &amp;#10;       if choice.keys == '1' and WinLossCode == 1: &amp;#10;           print('did not gamble during win condition')&amp;#10;           earnings = earnings + chosenMoney&amp;#10;           feedbackVar = 1&amp;#10;           print('Won sure money earnings:')&amp;#10;           print(earnings)&amp;#10;       if choice.keys == '1' and WinLossCode == 0: &amp;#10;           print('did not gamble for loss condition')&amp;#10;           feedbackVar = 2&amp;#10;           earnings = earnings - chosenMoney&amp;#10;           print('Lost sure Money earnings:')&amp;#10;           print(earnings)&amp;#10;    earningsStr = &quot;$&quot; + '%.2f' % earnings&amp;#10;    earningsText.setText('$' + earningsStr)&amp;#10;if choice.keys == None:&amp;#10;    feedbackVar = 4;&amp;#10;&amp;#10;GambleAmt.setColor('white')&amp;#10;SureAmt.setColor('white')&amp;#10;&amp;#10;if (blank.status==FINISHED):&amp;#10;    GambleAmt.setAutoDraw(False)&amp;#10;    SureAmt.setAutoDraw(False)&amp;#10;    SureProb.setAutoDraw(False)&amp;#10;    GambleProb.setAutoDraw(False)&amp;#10;    Line.setAutoDraw(False)&amp;#10;    moneyBank.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <TextComponent name="blank">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="blank" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="moneyBank">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="8" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="moneyBank" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.68, -0.42)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.46, 0.24)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="earningsText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.09" valType="code"/>
        <Param name="name" updates="None" val="earningsText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.64, -0.42)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$earningsStr" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="BeginInst">
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.085" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now be completing the full task. Your money bank will begin with the \$6.00 you earned from the card task&amp;#10;&amp;#10;Press SPACE to start!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="earning = 6&amp;#10;earnings = 6&amp;#10;earningsStr = &quot;$&quot; + '%.2f' % earnings&amp;#10;earningsText.setText('$' + earningsStr)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="earnings = 0;&amp;#10;earning = 0;&amp;#10;earningsText.setText(&quot;$0.00&quot;)" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="earnings = 6&amp;#10;earning = 6&amp;#10;earningsStr = &quot;$&quot; + '%.2f' % earnings&amp;#10;earningsText.setText('$' + earningsStr)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Main">
      <KeyboardComponent name="choice2">
        <Param name="allowedKeys" updates="set every repeat" val="'1','2'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="choice2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="sureAmt">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.11" valType="code"/>
        <Param name="name" updates="None" val="sureAmt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.41, -0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sure" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="gambleAmt">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.11" valType="code"/>
        <Param name="name" updates="None" val="gambleAmt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.41, -0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$gamble" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="GambleProbability">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.13" valType="code"/>
        <Param name="name" updates="None" val="GambleProbability" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.41, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$gambleProb" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="sureProb">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.13" valType="code"/>
        <Param name="name" updates="None" val="sureProb" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.41, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="100%" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if choice2.keys == '1':&amp;#10;    gambleAmt.setColor('green')&amp;#10;if choice2.keys == '2':&amp;#10;    sureAmt.setColor('green')&amp;#10;    &amp;#10;if (choice2.keys == '1' or choice.keys == '2') and blank.status == NOT_STARTED:&amp;#10;    blank.tStart = t&amp;#10;    blank.frameNStart = frameN&amp;#10;    blank.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if choice2.keys == '1':&amp;#10;    gambleAmt.setColor('green')&amp;#10;if choice2.keys == '2':&amp;#10;    sureAmt.setColor('green')&amp;#10;    &amp;#10;if (choice2.keys == '1' or choice.keys == '2') and blank.status == NOT_STARTED:&amp;#10;    blank.tStart = t&amp;#10;    blank.frameNStart = frameN&amp;#10;    blank.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="gambleAmt.setColor('white')&amp;#10;sureAmt.setColor('white')&amp;#10;&amp;#10;if (blank.status==FINISHED):&amp;#10;    gambleAmt.setAutoDraw(False)&amp;#10;    sureAmt.setAutoDraw(False)&amp;#10;    sureProb.setAutoDraw(False)&amp;#10;    GambleProbability.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="blank2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="blank2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="line">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="set every repeat" val="4" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="line" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="90" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="set every repeat" val="(3, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="isi">
      <TextComponent name="isi2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="isi2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Cue">
      <TextComponent name="cue">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.12" valType="code"/>
        <Param name="name" updates="None" val="cue" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$CueType" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_4">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="earning = 6&amp;#10;earnings = 6" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="PracticeCue">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.12" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="EMPHASIZE" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="ThankYou">
      <TextComponent name="tyText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="tyText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_7">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#&amp;#10;#return earnings;&amp;#10;#earningsStr = &quot;$&quot; + '%.2f' % earnings&amp;#10;tyText.setText(&quot;Thank you for playing!\n\nYour total earnings are &quot; + earningsStr)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="code_5">
      <CodeComponent name="code_6">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="earning = 0&amp;#10;earnings = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="earnings = 0&amp;#10;earningsStr= str(earnings)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Feedback">
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.09" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="placeholder" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_8">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="chosenStr = &quot;$&quot; + '%.2f' % chosenMoney&amp;#10;winVar = []&amp;#10;if WinLossCode == 1:&amp;#10;    winVar = &quot;won &quot;&amp;#10;if WinLossCode == 0:&amp;#10;    winVar = 'lost '&amp;#10;if feedbackVar == 1:&amp;#10;    text_3.setText(&quot;You won &quot; + chosenStr)&amp;#10;if feedbackVar == 2:&amp;#10;    text_3.setText(&quot;You lost &quot; + chosenStr)&amp;#10;if feedbackVar == 3 and WinLossCode == 1:&amp;#10;    text_3.setText(&quot;You won $0.00&quot;)&amp;#10;if feedbackVar == 3 and WinLossCode == 0:&amp;#10;    text_3.setText(&quot;You lost $0.00&quot;)&amp;#10;if feedbackVar ==4 :&amp;#10;    text_3.setText(&quot;No response made&quot;)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="inst3">
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.045" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will have three seconds to make your choice upon seeing the options. &amp;#10;&amp;#10;To choose the option on the left, press &quot;1&quot;. To choose the option on the right, press &quot;2&quot;.&amp;#10;&amp;#10;You will first be playing some practice rounds. To begin the practice, press ENTER!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.4" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Instr"/>
    <Routine name="Inst2"/>
    <Routine name="inst3"/>
    <Routine name="isi"/>
    <Routine name="PracticeCue"/>
    <LoopInitiator loopType="TrialHandler" name="PracticeLoop">
      <Param name="Selected rows" updates="None" val="0:3" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sure', 4.5), ('gamble', 6.75), ('gambleProb', 50.0), ('Rows', '000:0010'), ('CueType', 'EMPHASIZE'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('plus', '+')]), OrderedDict([('sure', 2.0), ('gamble', 4.25), ('gambleProb', 65.0), ('Rows', '00010:0020'), ('CueType', 'DE-EMPHASIZE'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('plus', '+')]), OrderedDict([('sure', 3.75), ('gamble', 7.5), ('gambleProb', 35.0), ('Rows', '00020:0030'), ('CueType', 'DE-EMPHASIZE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('plus', '+')]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('Rows', '0030:0040'), ('CueType', 'EMPHASIZE'), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('plus', None)]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('Rows', '0040:0050'), ('CueType', 'DE-EMPHASIZE'), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('plus', None)]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('Rows', '0050:0060'), ('CueType', 'EMPHASIZE'), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('plus', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="PracticeSlotMach.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="PracticeLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="isi"/>
    <Routine name="Practice"/>
    <Routine name="isi"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="PracticeLoop"/>
    <Routine name="BeginInst"/>
    <LoopInitiator loopType="TrialHandler" name="mainLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sure', 4.5), ('gamble', 6.75), ('gambleProb', 50.0), ('Rows', '000:0010'), ('CueType', 'EMPHASIZE'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('plus', '+')]), OrderedDict([('sure', 2.0), ('gamble', 4.25), ('gambleProb', 65.0), ('Rows', '00010:0020'), ('CueType', 'DE-EMPHASIZE'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('plus', '+')]), OrderedDict([('sure', 3.75), ('gamble', 7.5), ('gambleProb', 35.0), ('Rows', '00020:0030'), ('CueType', 'DE-EMPHASIZE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('plus', '+')]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('Rows', '0030:0040'), ('CueType', 'EMPHASIZE'), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('plus', None)]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('Rows', '0040:0050'), ('CueType', 'DE-EMPHASIZE'), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('plus', None)]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('Rows', '0050:0060'), ('CueType', 'EMPHASIZE'), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('plus', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="PracticeSlotMach.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="mainLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="isi"/>
    <Routine name="Cue"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="$Rows" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sure', 2.5), ('gamble', 6.75), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.375'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 4.25), ('gamble', 10.75), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.7625'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 8.0), ('gamble', 12.25), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '~7.96'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 1.25), ('gamble', 4.75), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '1.663'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 3.75), ('gamble', 5.25), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.143'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 4.25), ('gamble', 5.5), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-2.25'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.75), ('gamble', 5.75), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '~3.73'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 2.25), ('gamble', 6.5), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '~2.27'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 3.75), ('gamble', 5.5), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.575'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 4.25), ('gamble', 7.0), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.5'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 1.5), ('gamble', 3.5), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-1.75'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 5.5), ('gamble', 8.75), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '5.6875'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 1.75), ('gamble', 4.0), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-2'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.0), ('gamble', 8.5), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '~3'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 3.25), ('gamble', 6.5), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.5'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 1.5), ('gamble', 3.0), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-1.925'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 2.95), ('gamble', 6.75), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-2.3625'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 2.75), ('gamble', 5.0), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.25'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.75), ('gamble', 5.75), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '~3.73'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 1.25), ('gamble', 4.5), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-1.575'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 2.5), ('gamble', 6.75), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '2.3625'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.0), ('gamble', 6.0), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '1.925'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 3.15), ('gamble', 6.75), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.375'), ('riskyAdDis', 'AD')]), OrderedDict([('sure', 2.5), ('gamble', 7.25), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '2.275'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 3.75), ('gamble', 5.25), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.143'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.75), ('gamble', 5.5), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.575'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 4.75), ('gamble', 7.5), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-4.875'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.0), ('gamble', 9.0), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.15'), ('riskyAdDis', 'DIS')]), OrderedDict([('sure', 3.5), ('gamble', 10.0), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.5'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 1.5), ('gamble', 4.0), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-2'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 2.25), ('gamble', 6.5), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '~2.27'), ('riskyAdDis', 'equal')]), OrderedDict([('sure', 4.25), ('gamble', 7.0), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.5'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 4.25), ('gamble', 7.0), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.5'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.25), ('gamble', 6.5), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.25'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 3.95), ('gamble', 6.0), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.9'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 3.75), ('gamble', 10.75), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.413'), ('riskyAdDis', 'DIS')]), OrderedDict([('sure', 1.75), ('gamble', 3.5), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '1.925'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 2.75), ('gamble', 8.75), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3'), ('riskyAdDis', 'AD')]), OrderedDict([('sure', 5.25), ('gamble', 8.0), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '5.2'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 3.25), ('gamble', 5.0), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.25'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 3.5), ('gamble', 6.0), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.9'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 4.25), ('gamble', 9.0), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.5'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 1.75), ('gamble', 5.0), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '1.75'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 4.75), ('gamble', 7.5), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '4.875'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 2.25), ('gamble', 4.5), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-2.25'), ('riskyAdDis', 'equal')]), OrderedDict([('sure', 3.25), ('gamble', 9.5), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.325'), ('riskyAdDis', 'DIS')]), OrderedDict([('sure', 2.75), ('gamble', 5.0), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-1.75'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 5.0), ('gamble', 6.95), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '4.518'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 4.75), ('gamble', 7.25), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '5'), ('riskyAdDis', 'DIS')]), OrderedDict([('sure', 3.75), ('gamble', 5.75), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.73'), ('riskyAdDis', 'EQUAL')]), OrderedDict([('sure', 4.25), ('gamble', 8.5), ('gambleProb', 50.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '50%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '2.625'), ('riskyAdDis', 'equal')]), OrderedDict([('sure', 4.5), ('gamble', 7.0), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.5'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 3.5), ('gamble', 5.0), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '4.55'), ('riskyAdDis', 'DIS')]), OrderedDict([('sure', 3.75), ('gamble', 6.5), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-2.275'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 4.25), ('gamble', 8.5), ('gambleProb', 50.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '50%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.5'), ('riskyAdDis', 'equal')]), OrderedDict([('sure', 6.25), ('gamble', 9.5), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '3.325'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 2.5), ('gamble', 5.0), ('gambleProb', 65.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '65%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '-3.25'), ('riskyAdDis', 'dis')]), OrderedDict([('sure', 3.5), ('gamble', 7.0), ('gambleProb', 65.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '65%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '4.55'), ('riskyAdDis', 'ad')]), OrderedDict([('sure', 3.75), ('gamble', 10.75), ('gambleProb', 35.0), ('WinLoss', 'LOSE'), ('gambleWinLoss', '35%  LOSE'), ('sureWinLoss', '100%  LOSE'), ('WinLossCode', 0.0), ('Evgamble', '3.76'), ('riskyAdDis', 'equal')]), OrderedDict([('sure', 2.0), ('gamble', 6.25), ('gambleProb', 35.0), ('WinLoss', 'WIN'), ('gambleWinLoss', '35%  WIN'), ('sureWinLoss', '100%  WIN'), ('WinLossCode', 1.0), ('Evgamble', '2.18'), ('riskyAdDis', 'AD')]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('WinLoss', None), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('Evgamble', None), ('riskyAdDis', None)]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('WinLoss', None), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('Evgamble', None), ('riskyAdDis', None)]), OrderedDict([('sure', None), ('gamble', None), ('gambleProb', None), ('WinLoss', None), ('gambleWinLoss', None), ('sureWinLoss', None), ('WinLossCode', None), ('Evgamble', None), ('riskyAdDis', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="SlotMachine.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="isi"/>
    <Routine name="Practice"/>
    <Routine name="isi"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="trials"/>
    <LoopTerminator name="mainLoop"/>
    <Routine name="ThankYou"/>
  </Flow>
</PsychoPy2experiment>
